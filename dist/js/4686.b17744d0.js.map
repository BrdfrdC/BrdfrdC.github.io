{"version":3,"file":"js/4686.b17744d0.js","mappings":"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","sources":["webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/engine/browser/Core/Canvas.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/engine/browser/Core/Utils/EventListeners.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/engine/browser/Core/Utils/InteractionManager.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/engine/browser/Core/Particle.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/engine/browser/Core/Utils/Point.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/engine/browser/Core/Utils/QuadTree.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/engine/browser/Core/Particles.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/engine/browser/Core/Retina.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/engine/browser/Core/Container.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils.js\";\r\nimport { deepExtend, getLogger, safeMutationObserver } from \"../Utils/Utils.js\";\r\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\r\nimport { generatedAttribute } from \"./Utils/Constants.js\";\r\nfunction setTransformValue(factor, newFactor, key) {\r\n    const newValue = newFactor[key], defaultValue = 1;\r\n    if (newValue !== undefined) {\r\n        factor[key] = (factor[key] ?? defaultValue) * newValue;\r\n    }\r\n}\r\nfunction setStyle(canvas, style, important = false) {\r\n    if (!style) {\r\n        return;\r\n    }\r\n    const element = canvas;\r\n    if (!element) {\r\n        return;\r\n    }\r\n    const elementStyle = element.style;\r\n    if (!elementStyle) {\r\n        return;\r\n    }\r\n    for (const key in style) {\r\n        const value = style[key];\r\n        if (!value) {\r\n            continue;\r\n        }\r\n        elementStyle.setProperty(key, value, important ? \"important\" : \"\");\r\n    }\r\n}\r\nexport class Canvas {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this._applyPostDrawUpdaters = (particle) => {\r\n            for (const updater of this._postDrawUpdaters) {\r\n                updater.afterDraw?.(particle);\r\n            }\r\n        };\r\n        this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform) => {\r\n            for (const updater of this._preDrawUpdaters) {\r\n                if (updater.getColorStyles) {\r\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\r\n                    if (fill) {\r\n                        colorStyles.fill = fill;\r\n                    }\r\n                    if (stroke) {\r\n                        colorStyles.stroke = stroke;\r\n                    }\r\n                }\r\n                if (updater.getTransformValues) {\r\n                    const updaterTransform = updater.getTransformValues(particle);\r\n                    for (const key in updaterTransform) {\r\n                        setTransformValue(transform, updaterTransform, key);\r\n                    }\r\n                }\r\n                updater.beforeDraw?.(particle);\r\n            }\r\n        };\r\n        this._applyResizePlugins = () => {\r\n            for (const plugin of this._resizePlugins) {\r\n                plugin.resize?.();\r\n            }\r\n        };\r\n        this._getPluginParticleColors = (particle) => {\r\n            let fColor, sColor;\r\n            for (const plugin of this._colorPlugins) {\r\n                if (!fColor && plugin.particleFillColor) {\r\n                    fColor = rangeColorToHsl(plugin.particleFillColor(particle));\r\n                }\r\n                if (!sColor && plugin.particleStrokeColor) {\r\n                    sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\r\n                }\r\n                if (fColor && sColor) {\r\n                    break;\r\n                }\r\n            }\r\n            return [fColor, sColor];\r\n        };\r\n        this._initCover = async () => {\r\n            const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color;\r\n            if (color) {\r\n                const coverRgb = rangeColorToRgb(color);\r\n                if (coverRgb) {\r\n                    const coverColor = {\r\n                        ...coverRgb,\r\n                        a: cover.opacity,\r\n                    };\r\n                    this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\r\n                }\r\n            }\r\n            else {\r\n                await new Promise((resolve, reject) => {\r\n                    if (!cover.image) {\r\n                        return;\r\n                    }\r\n                    const img = document.createElement(\"img\");\r\n                    img.addEventListener(\"load\", () => {\r\n                        this._coverImage = {\r\n                            image: img,\r\n                            opacity: cover.opacity,\r\n                        };\r\n                        resolve();\r\n                    });\r\n                    img.addEventListener(\"error\", (evt) => {\r\n                        reject(evt.error);\r\n                    });\r\n                    img.src = cover.image;\r\n                });\r\n            }\r\n        };\r\n        this._initStyle = () => {\r\n            const element = this.element, options = this.container.actualOptions;\r\n            if (!element) {\r\n                return;\r\n            }\r\n            if (this._fullScreen) {\r\n                this._originalStyle = deepExtend({}, element.style);\r\n                this._setFullScreenStyle();\r\n            }\r\n            else {\r\n                this._resetOriginalStyle();\r\n            }\r\n            for (const key in options.style) {\r\n                if (!key || !options.style) {\r\n                    continue;\r\n                }\r\n                const value = options.style[key];\r\n                if (!value) {\r\n                    continue;\r\n                }\r\n                element.style.setProperty(key, value, \"important\");\r\n            }\r\n        };\r\n        this._initTrail = async () => {\r\n            const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\r\n            if (!trail.enable) {\r\n                return;\r\n            }\r\n            const factorNumerator = 1, opacity = factorNumerator / trail.length;\r\n            if (trailFill.color) {\r\n                const fillColor = rangeColorToRgb(trailFill.color);\r\n                if (!fillColor) {\r\n                    return;\r\n                }\r\n                this._trailFill = {\r\n                    color: {\r\n                        ...fillColor,\r\n                    },\r\n                    opacity,\r\n                };\r\n            }\r\n            else {\r\n                await new Promise((resolve, reject) => {\r\n                    if (!trailFill.image) {\r\n                        return;\r\n                    }\r\n                    const img = document.createElement(\"img\");\r\n                    img.addEventListener(\"load\", () => {\r\n                        this._trailFill = {\r\n                            image: img,\r\n                            opacity,\r\n                        };\r\n                        resolve();\r\n                    });\r\n                    img.addEventListener(\"error\", (evt) => {\r\n                        reject(evt.error);\r\n                    });\r\n                    img.src = trailFill.image;\r\n                });\r\n            }\r\n        };\r\n        this._paintBase = (baseColor) => {\r\n            this.draw((ctx) => paintBase(ctx, this.size, baseColor));\r\n        };\r\n        this._paintImage = (image, opacity) => {\r\n            this.draw((ctx) => paintImage(ctx, this.size, image, opacity));\r\n        };\r\n        this._repairStyle = () => {\r\n            const element = this.element;\r\n            if (!element) {\r\n                return;\r\n            }\r\n            this._safeMutationObserver((observer) => observer.disconnect());\r\n            this._initStyle();\r\n            this.initBackground();\r\n            this._safeMutationObserver((observer) => observer.observe(element, { attributes: true }));\r\n        };\r\n        this._resetOriginalStyle = () => {\r\n            const element = this.element, originalStyle = this._originalStyle;\r\n            if (!(element && originalStyle)) {\r\n                return;\r\n            }\r\n            setStyle(element, originalStyle);\r\n        };\r\n        this._safeMutationObserver = (callback) => {\r\n            if (!this._mutationObserver) {\r\n                return;\r\n            }\r\n            callback(this._mutationObserver);\r\n        };\r\n        this._setFullScreenStyle = () => {\r\n            const element = this.element;\r\n            if (!element) {\r\n                return;\r\n            }\r\n            const radix = 10;\r\n            setStyle(element, {\r\n                position: \"fixed\",\r\n                zIndex: this.container.actualOptions.fullScreen.zIndex.toString(radix),\r\n                top: \"0\",\r\n                left: \"0\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n            }, true);\r\n        };\r\n        this.size = {\r\n            height: 0,\r\n            width: 0,\r\n        };\r\n        this._context = null;\r\n        this._generated = false;\r\n        this._preDrawUpdaters = [];\r\n        this._postDrawUpdaters = [];\r\n        this._resizePlugins = [];\r\n        this._colorPlugins = [];\r\n    }\r\n    get _fullScreen() {\r\n        return this.container.actualOptions.fullScreen.enable;\r\n    }\r\n    clear() {\r\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill, minimumLength = 0;\r\n        if (options.backgroundMask.enable) {\r\n            this.paint();\r\n        }\r\n        else if (trail.enable && trail.length > minimumLength && trailFill) {\r\n            if (trailFill.color) {\r\n                this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\r\n            }\r\n            else if (trailFill.image) {\r\n                this._paintImage(trailFill.image, trailFill.opacity);\r\n            }\r\n        }\r\n        else if (options.clear) {\r\n            this.draw((ctx) => {\r\n                clear(ctx, this.size);\r\n            });\r\n        }\r\n    }\r\n    destroy() {\r\n        this.stop();\r\n        if (this._generated) {\r\n            const element = this.element;\r\n            element?.remove();\r\n        }\r\n        else {\r\n            this._resetOriginalStyle();\r\n        }\r\n        this._preDrawUpdaters = [];\r\n        this._postDrawUpdaters = [];\r\n        this._resizePlugins = [];\r\n        this._colorPlugins = [];\r\n    }\r\n    draw(cb) {\r\n        const ctx = this._context;\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n        return cb(ctx);\r\n    }\r\n    drawAsync(cb) {\r\n        const ctx = this._context;\r\n        if (!ctx) {\r\n            return undefined;\r\n        }\r\n        return cb(ctx);\r\n    }\r\n    drawParticle(particle, delta) {\r\n        if (particle.spawning || particle.destroyed) {\r\n            return;\r\n        }\r\n        const radius = particle.getRadius(), minimumSize = 0;\r\n        if (radius <= minimumSize) {\r\n            return;\r\n        }\r\n        const pfColor = particle.getFillColor(), psColor = particle.getStrokeColor() ?? pfColor;\r\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\r\n        if (!fColor) {\r\n            fColor = pfColor;\r\n        }\r\n        if (!sColor) {\r\n            sColor = psColor;\r\n        }\r\n        if (!fColor && !sColor) {\r\n            return;\r\n        }\r\n        this.draw((ctx) => {\r\n            const container = this.container, options = container.actualOptions, zIndexOptions = particle.options.zIndex, zIndexFactorOffset = 1, zIndexFactor = zIndexFactorOffset - particle.zIndexFactor, zOpacityFactor = zIndexFactor ** zIndexOptions.opacityRate, defaultOpacity = 1, opacity = particle.bubble.opacity ?? particle.opacity?.value ?? defaultOpacity, strokeOpacity = particle.strokeOpacity ?? opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\r\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\r\n            };\r\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\r\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\r\n            drawParticle({\r\n                container,\r\n                context: ctx,\r\n                particle,\r\n                delta,\r\n                colorStyles,\r\n                backgroundMask: options.backgroundMask.enable,\r\n                composite: options.backgroundMask.composite,\r\n                radius: radius * zIndexFactor ** zIndexOptions.sizeRate,\r\n                opacity: zOpacity,\r\n                shadow: particle.options.shadow,\r\n                transform,\r\n            });\r\n            this._applyPostDrawUpdaters(particle);\r\n        });\r\n    }\r\n    drawParticlePlugin(plugin, particle, delta) {\r\n        this.draw((ctx) => drawParticlePlugin(ctx, plugin, particle, delta));\r\n    }\r\n    drawPlugin(plugin, delta) {\r\n        this.draw((ctx) => drawPlugin(ctx, plugin, delta));\r\n    }\r\n    async init() {\r\n        this._safeMutationObserver((obs) => obs.disconnect());\r\n        this._mutationObserver = safeMutationObserver((records) => {\r\n            for (const record of records) {\r\n                if (record.type === \"attributes\" && record.attributeName === \"style\") {\r\n                    this._repairStyle();\r\n                }\r\n            }\r\n        });\r\n        this.resize();\r\n        this._initStyle();\r\n        await this._initCover();\r\n        try {\r\n            await this._initTrail();\r\n        }\r\n        catch (e) {\r\n            getLogger().error(e);\r\n        }\r\n        this.initBackground();\r\n        this._safeMutationObserver((obs) => {\r\n            if (!this.element) {\r\n                return;\r\n            }\r\n            obs.observe(this.element, { attributes: true });\r\n        });\r\n        this.initUpdaters();\r\n        this.initPlugins();\r\n        this.paint();\r\n    }\r\n    initBackground() {\r\n        const options = this.container.actualOptions, background = options.background, element = this.element;\r\n        if (!element) {\r\n            return;\r\n        }\r\n        const elementStyle = element.style;\r\n        if (!elementStyle) {\r\n            return;\r\n        }\r\n        if (background.color) {\r\n            const color = rangeColorToRgb(background.color);\r\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\r\n        }\r\n        else {\r\n            elementStyle.backgroundColor = \"\";\r\n        }\r\n        elementStyle.backgroundImage = background.image || \"\";\r\n        elementStyle.backgroundPosition = background.position || \"\";\r\n        elementStyle.backgroundRepeat = background.repeat || \"\";\r\n        elementStyle.backgroundSize = background.size || \"\";\r\n    }\r\n    initPlugins() {\r\n        this._resizePlugins = [];\r\n        for (const [, plugin] of this.container.plugins) {\r\n            if (plugin.resize) {\r\n                this._resizePlugins.push(plugin);\r\n            }\r\n            if (plugin.particleFillColor ?? plugin.particleStrokeColor) {\r\n                this._colorPlugins.push(plugin);\r\n            }\r\n        }\r\n    }\r\n    initUpdaters() {\r\n        this._preDrawUpdaters = [];\r\n        this._postDrawUpdaters = [];\r\n        for (const updater of this.container.particles.updaters) {\r\n            if (updater.afterDraw) {\r\n                this._postDrawUpdaters.push(updater);\r\n            }\r\n            if (updater.getColorStyles ?? updater.getTransformValues ?? updater.beforeDraw) {\r\n                this._preDrawUpdaters.push(updater);\r\n            }\r\n        }\r\n    }\r\n    loadCanvas(canvas) {\r\n        if (this._generated && this.element) {\r\n            this.element.remove();\r\n        }\r\n        this._generated =\r\n            canvas.dataset && generatedAttribute in canvas.dataset\r\n                ? canvas.dataset[generatedAttribute] === \"true\"\r\n                : this._generated;\r\n        this.element = canvas;\r\n        this.element.ariaHidden = \"true\";\r\n        this._originalStyle = deepExtend({}, this.element.style);\r\n        this.size.height = canvas.offsetHeight;\r\n        this.size.width = canvas.offsetWidth;\r\n        this._context = this.element.getContext(\"2d\");\r\n        this._safeMutationObserver((obs) => {\r\n            if (!this.element) {\r\n                return;\r\n            }\r\n            obs.observe(this.element, { attributes: true });\r\n        });\r\n        this.container.retina.init();\r\n        this.initBackground();\r\n    }\r\n    paint() {\r\n        const options = this.container.actualOptions;\r\n        this.draw((ctx) => {\r\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\r\n                clear(ctx, this.size);\r\n                if (this._coverImage) {\r\n                    this._paintImage(this._coverImage.image, this._coverImage.opacity);\r\n                }\r\n                else if (this._coverColorStyle) {\r\n                    this._paintBase(this._coverColorStyle);\r\n                }\r\n                else {\r\n                    this._paintBase();\r\n                }\r\n            }\r\n            else {\r\n                this._paintBase();\r\n            }\r\n        });\r\n    }\r\n    resize() {\r\n        if (!this.element) {\r\n            return false;\r\n        }\r\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\r\n            width: this.element.offsetWidth * pxRatio,\r\n            height: this.element.offsetHeight * pxRatio,\r\n        };\r\n        if (newSize.height === size.height &&\r\n            newSize.width === size.width &&\r\n            newSize.height === this.element.height &&\r\n            newSize.width === this.element.width) {\r\n            return false;\r\n        }\r\n        const oldSize = { ...size };\r\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\r\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\r\n        if (this.container.started) {\r\n            container.particles.setResizeFactor({\r\n                width: size.width / oldSize.width,\r\n                height: size.height / oldSize.height,\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n    stop() {\r\n        this._safeMutationObserver((obs) => obs.disconnect());\r\n        this._mutationObserver = undefined;\r\n        this.draw((ctx) => clear(ctx, this.size));\r\n    }\r\n    async windowResize() {\r\n        if (!this.element || !this.resize()) {\r\n            return;\r\n        }\r\n        const container = this.container, needsRefresh = container.updateActualOptions();\r\n        container.particles.setDensity();\r\n        this._applyResizePlugins();\r\n        if (needsRefresh) {\r\n            await container.refresh();\r\n        }\r\n    }\r\n}\r\n","import { executeOnSingleOrMultiple, safeMatchMedia } from \"../../Utils/Utils.js\";\r\nimport { millisecondsToSeconds, mouseDownEvent, mouseLeaveEvent, mouseMoveEvent, mouseOutEvent, mouseUpEvent, resizeEvent, touchCancelEvent, touchEndEvent, touchMoveEvent, touchStartEvent, visibilityChangeEvent, } from \"./Constants.js\";\r\nimport { isBoolean } from \"../../Utils/TypeUtils.js\";\r\nconst double = 2;\r\nfunction manageListener(element, event, handler, add, options) {\r\n    if (add) {\r\n        let addOptions = { passive: true };\r\n        if (isBoolean(options)) {\r\n            addOptions.capture = options;\r\n        }\r\n        else if (options !== undefined) {\r\n            addOptions = options;\r\n        }\r\n        element.addEventListener(event, handler, addOptions);\r\n    }\r\n    else {\r\n        const removeOptions = options;\r\n        element.removeEventListener(event, handler, removeOptions);\r\n    }\r\n}\r\nexport class EventListeners {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this._doMouseTouchClick = (e) => {\r\n            const container = this.container, options = container.actualOptions;\r\n            if (this._canPush) {\r\n                const mouseInteractivity = container.interactivity.mouse, mousePos = mouseInteractivity.position;\r\n                if (!mousePos) {\r\n                    return;\r\n                }\r\n                mouseInteractivity.clickPosition = { ...mousePos };\r\n                mouseInteractivity.clickTime = new Date().getTime();\r\n                const onClick = options.interactivity.events.onClick;\r\n                executeOnSingleOrMultiple(onClick.mode, (mode) => this.container.handleClickMode(mode));\r\n            }\r\n            if (e.type === \"touchend\") {\r\n                const touchDelay = 500;\r\n                setTimeout(() => this._mouseTouchFinish(), touchDelay);\r\n            }\r\n        };\r\n        this._handleThemeChange = (e) => {\r\n            const mediaEvent = e, container = this.container, options = container.options, defaultThemes = options.defaultThemes, themeName = mediaEvent.matches ? defaultThemes.dark : defaultThemes.light, theme = options.themes.find((theme) => theme.name === themeName);\r\n            if (theme && theme.default.auto) {\r\n                void container.loadTheme(themeName);\r\n            }\r\n        };\r\n        this._handleVisibilityChange = () => {\r\n            const container = this.container, options = container.actualOptions;\r\n            this._mouseTouchFinish();\r\n            if (!options.pauseOnBlur) {\r\n                return;\r\n            }\r\n            if (document && document.hidden) {\r\n                container.pageHidden = true;\r\n                container.pause();\r\n            }\r\n            else {\r\n                container.pageHidden = false;\r\n                if (container.animationStatus) {\r\n                    void container.play(true);\r\n                }\r\n                else {\r\n                    void container.draw(true);\r\n                }\r\n            }\r\n        };\r\n        this._handleWindowResize = () => {\r\n            if (this._resizeTimeout) {\r\n                clearTimeout(this._resizeTimeout);\r\n                delete this._resizeTimeout;\r\n            }\r\n            const handleResize = async () => {\r\n                const canvas = this.container.canvas;\r\n                await canvas?.windowResize();\r\n            };\r\n            this._resizeTimeout = setTimeout(() => void handleResize(), this.container.actualOptions.interactivity.events.resize.delay * millisecondsToSeconds);\r\n        };\r\n        this._manageInteractivityListeners = (mouseLeaveTmpEvent, add) => {\r\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\r\n            const interactivityEl = container.interactivity.element;\r\n            if (!interactivityEl) {\r\n                return;\r\n            }\r\n            const html = interactivityEl, canvasEl = container.canvas.element;\r\n            if (canvasEl) {\r\n                canvasEl.style.pointerEvents = html === canvasEl ? \"initial\" : \"none\";\r\n            }\r\n            if (!(options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable)) {\r\n                return;\r\n            }\r\n            manageListener(interactivityEl, mouseMoveEvent, handlers.mouseMove, add);\r\n            manageListener(interactivityEl, touchStartEvent, handlers.touchStart, add);\r\n            manageListener(interactivityEl, touchMoveEvent, handlers.touchMove, add);\r\n            if (!options.interactivity.events.onClick.enable) {\r\n                manageListener(interactivityEl, touchEndEvent, handlers.touchEnd, add);\r\n            }\r\n            else {\r\n                manageListener(interactivityEl, touchEndEvent, handlers.touchEndClick, add);\r\n                manageListener(interactivityEl, mouseUpEvent, handlers.mouseUp, add);\r\n                manageListener(interactivityEl, mouseDownEvent, handlers.mouseDown, add);\r\n            }\r\n            manageListener(interactivityEl, mouseLeaveTmpEvent, handlers.mouseLeave, add);\r\n            manageListener(interactivityEl, touchCancelEvent, handlers.touchCancel, add);\r\n        };\r\n        this._manageListeners = (add) => {\r\n            const handlers = this._handlers, container = this.container, options = container.actualOptions, detectType = options.interactivity.detectsOn, canvasEl = container.canvas.element;\r\n            let mouseLeaveTmpEvent = mouseLeaveEvent;\r\n            if (detectType === \"window\") {\r\n                container.interactivity.element = window;\r\n                mouseLeaveTmpEvent = mouseOutEvent;\r\n            }\r\n            else if (detectType === \"parent\" && canvasEl) {\r\n                container.interactivity.element = canvasEl.parentElement ?? canvasEl.parentNode;\r\n            }\r\n            else {\r\n                container.interactivity.element = canvasEl;\r\n            }\r\n            this._manageMediaMatch(add);\r\n            this._manageResize(add);\r\n            this._manageInteractivityListeners(mouseLeaveTmpEvent, add);\r\n            if (document) {\r\n                manageListener(document, visibilityChangeEvent, handlers.visibilityChange, add, false);\r\n            }\r\n        };\r\n        this._manageMediaMatch = (add) => {\r\n            const handlers = this._handlers, mediaMatch = safeMatchMedia(\"(prefers-color-scheme: dark)\");\r\n            if (!mediaMatch) {\r\n                return;\r\n            }\r\n            if (mediaMatch.addEventListener !== undefined) {\r\n                manageListener(mediaMatch, \"change\", handlers.themeChange, add);\r\n                return;\r\n            }\r\n            if (mediaMatch.addListener === undefined) {\r\n                return;\r\n            }\r\n            if (add) {\r\n                mediaMatch.addListener(handlers.oldThemeChange);\r\n            }\r\n            else {\r\n                mediaMatch.removeListener(handlers.oldThemeChange);\r\n            }\r\n        };\r\n        this._manageResize = (add) => {\r\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\r\n            if (!options.interactivity.events.resize) {\r\n                return;\r\n            }\r\n            if (typeof ResizeObserver === \"undefined\") {\r\n                manageListener(window, resizeEvent, handlers.resize, add);\r\n                return;\r\n            }\r\n            const canvasEl = container.canvas.element;\r\n            if (this._resizeObserver && !add) {\r\n                if (canvasEl) {\r\n                    this._resizeObserver.unobserve(canvasEl);\r\n                }\r\n                this._resizeObserver.disconnect();\r\n                delete this._resizeObserver;\r\n            }\r\n            else if (!this._resizeObserver && add && canvasEl) {\r\n                this._resizeObserver = new ResizeObserver((entries) => {\r\n                    const entry = entries.find((e) => e.target === canvasEl);\r\n                    if (!entry) {\r\n                        return;\r\n                    }\r\n                    this._handleWindowResize();\r\n                });\r\n                this._resizeObserver.observe(canvasEl);\r\n            }\r\n        };\r\n        this._mouseDown = () => {\r\n            const { interactivity } = this.container;\r\n            if (!interactivity) {\r\n                return;\r\n            }\r\n            const { mouse } = interactivity;\r\n            mouse.clicking = true;\r\n            mouse.downPosition = mouse.position;\r\n        };\r\n        this._mouseTouchClick = (e) => {\r\n            const container = this.container, options = container.actualOptions, { mouse } = container.interactivity;\r\n            mouse.inside = true;\r\n            let handled = false;\r\n            const mousePosition = mouse.position;\r\n            if (!mousePosition || !options.interactivity.events.onClick.enable) {\r\n                return;\r\n            }\r\n            for (const [, plugin] of container.plugins) {\r\n                if (!plugin.clickPositionValid) {\r\n                    continue;\r\n                }\r\n                handled = plugin.clickPositionValid(mousePosition);\r\n                if (handled) {\r\n                    break;\r\n                }\r\n            }\r\n            if (!handled) {\r\n                this._doMouseTouchClick(e);\r\n            }\r\n            mouse.clicking = false;\r\n        };\r\n        this._mouseTouchFinish = () => {\r\n            const interactivity = this.container.interactivity;\r\n            if (!interactivity) {\r\n                return;\r\n            }\r\n            const mouse = interactivity.mouse;\r\n            delete mouse.position;\r\n            delete mouse.clickPosition;\r\n            delete mouse.downPosition;\r\n            interactivity.status = mouseLeaveEvent;\r\n            mouse.inside = false;\r\n            mouse.clicking = false;\r\n        };\r\n        this._mouseTouchMove = (e) => {\r\n            const container = this.container, options = container.actualOptions, interactivity = container.interactivity, canvasEl = container.canvas.element;\r\n            if (!interactivity?.element) {\r\n                return;\r\n            }\r\n            interactivity.mouse.inside = true;\r\n            let pos;\r\n            if (e.type.startsWith(\"pointer\")) {\r\n                this._canPush = true;\r\n                const mouseEvent = e;\r\n                if (interactivity.element === window) {\r\n                    if (canvasEl) {\r\n                        const clientRect = canvasEl.getBoundingClientRect();\r\n                        pos = {\r\n                            x: mouseEvent.clientX - clientRect.left,\r\n                            y: mouseEvent.clientY - clientRect.top,\r\n                        };\r\n                    }\r\n                }\r\n                else if (options.interactivity.detectsOn === \"parent\") {\r\n                    const source = mouseEvent.target, target = mouseEvent.currentTarget;\r\n                    if (source && target && canvasEl) {\r\n                        const sourceRect = source.getBoundingClientRect(), targetRect = target.getBoundingClientRect(), canvasRect = canvasEl.getBoundingClientRect();\r\n                        pos = {\r\n                            x: mouseEvent.offsetX + double * sourceRect.left - (targetRect.left + canvasRect.left),\r\n                            y: mouseEvent.offsetY + double * sourceRect.top - (targetRect.top + canvasRect.top),\r\n                        };\r\n                    }\r\n                    else {\r\n                        pos = {\r\n                            x: mouseEvent.offsetX ?? mouseEvent.clientX,\r\n                            y: mouseEvent.offsetY ?? mouseEvent.clientY,\r\n                        };\r\n                    }\r\n                }\r\n                else if (mouseEvent.target === canvasEl) {\r\n                    pos = {\r\n                        x: mouseEvent.offsetX ?? mouseEvent.clientX,\r\n                        y: mouseEvent.offsetY ?? mouseEvent.clientY,\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                this._canPush = e.type !== \"touchmove\";\r\n                if (canvasEl) {\r\n                    const touchEvent = e, lengthOffset = 1, lastTouch = touchEvent.touches[touchEvent.touches.length - lengthOffset], canvasRect = canvasEl.getBoundingClientRect(), defaultCoordinate = 0;\r\n                    pos = {\r\n                        x: lastTouch.clientX - (canvasRect.left ?? defaultCoordinate),\r\n                        y: lastTouch.clientY - (canvasRect.top ?? defaultCoordinate),\r\n                    };\r\n                }\r\n            }\r\n            const pxRatio = container.retina.pixelRatio;\r\n            if (pos) {\r\n                pos.x *= pxRatio;\r\n                pos.y *= pxRatio;\r\n            }\r\n            interactivity.mouse.position = pos;\r\n            interactivity.status = mouseMoveEvent;\r\n        };\r\n        this._touchEnd = (e) => {\r\n            const evt = e, touches = Array.from(evt.changedTouches);\r\n            for (const touch of touches) {\r\n                this._touches.delete(touch.identifier);\r\n            }\r\n            this._mouseTouchFinish();\r\n        };\r\n        this._touchEndClick = (e) => {\r\n            const evt = e, touches = Array.from(evt.changedTouches);\r\n            for (const touch of touches) {\r\n                this._touches.delete(touch.identifier);\r\n            }\r\n            this._mouseTouchClick(e);\r\n        };\r\n        this._touchStart = (e) => {\r\n            const evt = e, touches = Array.from(evt.changedTouches);\r\n            for (const touch of touches) {\r\n                this._touches.set(touch.identifier, performance.now());\r\n            }\r\n            this._mouseTouchMove(e);\r\n        };\r\n        this._canPush = true;\r\n        this._touches = new Map();\r\n        this._handlers = {\r\n            mouseDown: () => this._mouseDown(),\r\n            mouseLeave: () => this._mouseTouchFinish(),\r\n            mouseMove: (e) => this._mouseTouchMove(e),\r\n            mouseUp: (e) => this._mouseTouchClick(e),\r\n            touchStart: (e) => this._touchStart(e),\r\n            touchMove: (e) => this._mouseTouchMove(e),\r\n            touchEnd: (e) => this._touchEnd(e),\r\n            touchCancel: (e) => this._touchEnd(e),\r\n            touchEndClick: (e) => this._touchEndClick(e),\r\n            visibilityChange: () => this._handleVisibilityChange(),\r\n            themeChange: (e) => this._handleThemeChange(e),\r\n            oldThemeChange: (e) => this._handleThemeChange(e),\r\n            resize: () => {\r\n                this._handleWindowResize();\r\n            },\r\n        };\r\n    }\r\n    addListeners() {\r\n        this._manageListeners(true);\r\n    }\r\n    removeListeners() {\r\n        this._manageListeners(false);\r\n    }\r\n}\r\n","export class InteractionManager {\r\n    constructor(engine, container) {\r\n        this.container = container;\r\n        this._engine = engine;\r\n        this._interactors = [];\r\n        this._externalInteractors = [];\r\n        this._particleInteractors = [];\r\n    }\r\n    externalInteract(delta) {\r\n        for (const interactor of this._externalInteractors) {\r\n            if (interactor.isEnabled()) {\r\n                interactor.interact(delta);\r\n            }\r\n        }\r\n    }\r\n    handleClickMode(mode) {\r\n        for (const interactor of this._externalInteractors) {\r\n            interactor.handleClickMode?.(mode);\r\n        }\r\n    }\r\n    async init() {\r\n        this._interactors = await this._engine.getInteractors(this.container, true);\r\n        this._externalInteractors = [];\r\n        this._particleInteractors = [];\r\n        for (const interactor of this._interactors) {\r\n            switch (interactor.type) {\r\n                case \"external\":\r\n                    this._externalInteractors.push(interactor);\r\n                    break;\r\n                case \"particles\":\r\n                    this._particleInteractors.push(interactor);\r\n                    break;\r\n            }\r\n            interactor.init();\r\n        }\r\n    }\r\n    particlesInteract(particle, delta) {\r\n        for (const interactor of this._externalInteractors) {\r\n            interactor.clear(particle, delta);\r\n        }\r\n        for (const interactor of this._particleInteractors) {\r\n            if (interactor.isEnabled(particle)) {\r\n                interactor.interact(particle, delta);\r\n            }\r\n        }\r\n    }\r\n    reset(particle) {\r\n        for (const interactor of this._externalInteractors) {\r\n            if (interactor.isEnabled()) {\r\n                interactor.reset(particle);\r\n            }\r\n        }\r\n        for (const interactor of this._particleInteractors) {\r\n            if (interactor.isEnabled(particle)) {\r\n                interactor.reset(particle);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Vector, Vector3d } from \"./Utils/Vectors.js\";\r\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils.js\";\r\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils.js\";\r\nimport { errorPrefix, millisecondsToSeconds } from \"./Utils/Constants.js\";\r\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\r\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\r\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\r\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\r\nconst defaultRetryCount = 0, double = 2, half = 0.5, squareExp = 2;\r\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\r\n    const effectData = effectOptions.options[effect];\r\n    if (!effectData) {\r\n        return;\r\n    }\r\n    return deepExtend({\r\n        close: effectOptions.close,\r\n        fill: effectOptions.fill,\r\n    }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\r\n}\r\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\r\n    const shapeData = shapeOptions.options[shape];\r\n    if (!shapeData) {\r\n        return;\r\n    }\r\n    return deepExtend({\r\n        close: shapeOptions.close,\r\n        fill: shapeOptions.fill,\r\n    }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\r\n}\r\nfunction fixOutMode(data) {\r\n    if (!isInArray(data.outMode, data.checkModes)) {\r\n        return;\r\n    }\r\n    const diameter = data.radius * double;\r\n    if (data.coord > data.maxCoord - diameter) {\r\n        data.setCb(-data.radius);\r\n    }\r\n    else if (data.coord < diameter) {\r\n        data.setCb(data.radius);\r\n    }\r\n}\r\nexport class Particle {\r\n    constructor(engine, container) {\r\n        this.container = container;\r\n        this._calcPosition = (container, position, zIndex, tryCount = defaultRetryCount) => {\r\n            for (const [, plugin] of container.plugins) {\r\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\r\n                if (pluginPos) {\r\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\r\n                }\r\n            }\r\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\r\n                size: canvasSize,\r\n                position: position,\r\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\r\n                fixOutMode({\r\n                    outMode,\r\n                    checkModes: [\"bounce\"],\r\n                    coord: pos.x,\r\n                    maxCoord: container.canvas.size.width,\r\n                    setCb: (value) => (pos.x += value),\r\n                    radius,\r\n                });\r\n            }, fixVertical = (outMode) => {\r\n                fixOutMode({\r\n                    outMode,\r\n                    checkModes: [\"bounce\"],\r\n                    coord: pos.y,\r\n                    maxCoord: container.canvas.size.height,\r\n                    setCb: (value) => (pos.y += value),\r\n                    radius,\r\n                });\r\n            };\r\n            fixHorizontal(outModes.left ?? outModes.default);\r\n            fixHorizontal(outModes.right ?? outModes.default);\r\n            fixVertical(outModes.top ?? outModes.default);\r\n            fixVertical(outModes.bottom ?? outModes.default);\r\n            if (this._checkOverlap(pos, tryCount)) {\r\n                const increment = 1;\r\n                return this._calcPosition(container, undefined, zIndex, tryCount + increment);\r\n            }\r\n            return pos;\r\n        };\r\n        this._calculateVelocity = () => {\r\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\r\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\r\n                return res;\r\n            }\r\n            const rad = degToRad(getRangeValue(moveOptions.angle.value)), radOffset = degToRad(getRangeValue(moveOptions.angle.offset)), range = {\r\n                left: radOffset - rad * half,\r\n                right: radOffset + rad * half,\r\n            };\r\n            if (!moveOptions.straight) {\r\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\r\n            }\r\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\r\n                res.length *= getRandom();\r\n            }\r\n            return res;\r\n        };\r\n        this._checkOverlap = (pos, tryCount = defaultRetryCount) => {\r\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\r\n            if (!collisionsOptions.enable) {\r\n                return false;\r\n            }\r\n            const overlapOptions = collisionsOptions.overlap;\r\n            if (overlapOptions.enable) {\r\n                return false;\r\n            }\r\n            const retries = overlapOptions.retries, minRetries = 0;\r\n            if (retries >= minRetries && tryCount > retries) {\r\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\r\n            }\r\n            return !!this.container.particles.find((particle) => getDistance(pos, particle.position) < radius + particle.getRadius());\r\n        };\r\n        this._getRollColor = (color) => {\r\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\r\n                return color;\r\n            }\r\n            const rollFactor = 1, none = 0, backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor, backSum = this.roll.horizontal ? Math.PI * half : none, rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\r\n            if (!rolled) {\r\n                return color;\r\n            }\r\n            if (this.backColor) {\r\n                return this.backColor;\r\n            }\r\n            if (this.roll.alter) {\r\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\r\n            }\r\n            return color;\r\n        };\r\n        this._initPosition = (position) => {\r\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value), minZ = 0;\r\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\r\n            this.initialPosition = this.position.copy();\r\n            const canvasSize = container.canvas.size, defaultRadius = 0;\r\n            this.moveCenter = {\r\n                ...getPosition(this.options.move.center, canvasSize),\r\n                radius: this.options.move.center.radius ?? defaultRadius,\r\n                mode: this.options.move.center.mode ?? \"percent\",\r\n            };\r\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\r\n            switch (this.options.move.direction) {\r\n                case \"inside\":\r\n                    this.outType = \"inside\";\r\n                    break;\r\n                case \"outside\":\r\n                    this.outType = \"outside\";\r\n                    break;\r\n            }\r\n            this.offset = Vector.origin;\r\n        };\r\n        this._engine = engine;\r\n    }\r\n    destroy(override) {\r\n        if (this.unbreakable || this.destroyed) {\r\n            return;\r\n        }\r\n        this.destroyed = true;\r\n        this.bubble.inRange = false;\r\n        this.slow.inRange = false;\r\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\r\n        shapeDrawer?.particleDestroy?.(this);\r\n        for (const [, plugin] of container.plugins) {\r\n            plugin.particleDestroyed?.(this, override);\r\n        }\r\n        for (const updater of container.particles.updaters) {\r\n            updater.particleDestroyed?.(this, override);\r\n        }\r\n        pathGenerator?.reset(this);\r\n        this._engine.dispatchEvent(\"particleDestroyed\", {\r\n            container: this.container,\r\n            data: {\r\n                particle: this,\r\n            },\r\n        });\r\n    }\r\n    draw(delta) {\r\n        const container = this.container, canvas = container.canvas;\r\n        for (const [, plugin] of container.plugins) {\r\n            canvas.drawParticlePlugin(plugin, this, delta);\r\n        }\r\n        canvas.drawParticle(this, delta);\r\n    }\r\n    getFillColor() {\r\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\r\n    }\r\n    getMass() {\r\n        return this.getRadius() ** squareExp * Math.PI * half;\r\n    }\r\n    getPosition() {\r\n        return {\r\n            x: this.position.x + this.offset.x,\r\n            y: this.position.y + this.offset.y,\r\n            z: this.position.z,\r\n        };\r\n    }\r\n    getRadius() {\r\n        return this.bubble.radius ?? this.size.value;\r\n    }\r\n    getStrokeColor() {\r\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\r\n    }\r\n    init(id, position, overrideOptions, group) {\r\n        const container = this.container, engine = this._engine;\r\n        this.id = id;\r\n        this.group = group;\r\n        this.effectClose = true;\r\n        this.effectFill = true;\r\n        this.shapeClose = true;\r\n        this.shapeFill = true;\r\n        this.pathRotation = false;\r\n        this.lastPathTime = 0;\r\n        this.destroyed = false;\r\n        this.unbreakable = false;\r\n        this.rotation = 0;\r\n        this.misplaced = false;\r\n        this.retina = {\r\n            maxDistance: {},\r\n        };\r\n        this.outType = \"normal\";\r\n        this.ignoresResizeRatio = true;\r\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\r\n        this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\r\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\r\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\r\n        if (overrideOptions) {\r\n            if (overrideOptions.effect?.type) {\r\n                const overrideEffectType = overrideOptions.effect.type, effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\r\n                if (effect) {\r\n                    this.effect = effect;\r\n                    effectOptions.load(overrideOptions.effect);\r\n                }\r\n            }\r\n            if (overrideOptions.shape?.type) {\r\n                const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\r\n                if (shape) {\r\n                    this.shape = shape;\r\n                    shapeOptions.load(overrideOptions.shape);\r\n                }\r\n            }\r\n        }\r\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\r\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\r\n        particlesOptions.load(overrideOptions);\r\n        const effectData = this.effectData;\r\n        if (effectData) {\r\n            particlesOptions.load(effectData.particles);\r\n        }\r\n        const shapeData = this.shapeData;\r\n        if (shapeData) {\r\n            particlesOptions.load(shapeData.particles);\r\n        }\r\n        const interactivity = new Interactivity(engine, container);\r\n        interactivity.load(container.actualOptions.interactivity);\r\n        interactivity.load(particlesOptions.interactivity);\r\n        this.interactivity = interactivity;\r\n        this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\r\n        this.effectClose = effectData?.close ?? particlesOptions.effect.close;\r\n        this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\r\n        this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\r\n        this.options = particlesOptions;\r\n        const pathOptions = this.options.move.path;\r\n        this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\r\n        if (pathOptions.generator) {\r\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\r\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\r\n                this.pathGenerator.init(container);\r\n            }\r\n        }\r\n        container.retina.initParticle(this);\r\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\r\n        this.bubble = {\r\n            inRange: false,\r\n        };\r\n        this.slow = {\r\n            inRange: false,\r\n            factor: 1,\r\n        };\r\n        this._initPosition(position);\r\n        this.initialVelocity = this._calculateVelocity();\r\n        this.velocity = this.initialVelocity.copy();\r\n        const decayOffset = 1;\r\n        this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\r\n        const particles = container.particles;\r\n        particles.setLastZIndex(this.position.z);\r\n        this.zIndexFactor = this.position.z / container.zLayers;\r\n        this.sides = 24;\r\n        let effectDrawer = container.effectDrawers.get(this.effect);\r\n        if (!effectDrawer) {\r\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\r\n            if (effectDrawer) {\r\n                container.effectDrawers.set(this.effect, effectDrawer);\r\n            }\r\n        }\r\n        if (effectDrawer?.loadEffect) {\r\n            effectDrawer.loadEffect(this);\r\n        }\r\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\r\n        if (!shapeDrawer) {\r\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\r\n            if (shapeDrawer) {\r\n                container.shapeDrawers.set(this.shape, shapeDrawer);\r\n            }\r\n        }\r\n        if (shapeDrawer?.loadShape) {\r\n            shapeDrawer.loadShape(this);\r\n        }\r\n        const sideCountFunc = shapeDrawer?.getSidesCount;\r\n        if (sideCountFunc) {\r\n            this.sides = sideCountFunc(this);\r\n        }\r\n        this.spawning = false;\r\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\r\n        for (const updater of particles.updaters) {\r\n            updater.init(this);\r\n        }\r\n        for (const mover of particles.movers) {\r\n            mover.init?.(this);\r\n        }\r\n        effectDrawer?.particleInit?.(container, this);\r\n        shapeDrawer?.particleInit?.(container, this);\r\n        for (const [, plugin] of container.plugins) {\r\n            plugin.particleCreated?.(this);\r\n        }\r\n    }\r\n    isInsideCanvas() {\r\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\r\n        return (position.x >= -radius &&\r\n            position.y >= -radius &&\r\n            position.y <= canvasSize.height + radius &&\r\n            position.x <= canvasSize.width + radius);\r\n    }\r\n    isVisible() {\r\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\r\n    }\r\n    reset() {\r\n        for (const updater of this.container.particles.updaters) {\r\n            updater.reset?.(this);\r\n        }\r\n    }\r\n}\r\n","export class Point {\r\n    constructor(position, particle) {\r\n        this.position = position;\r\n        this.particle = particle;\r\n    }\r\n}\r\n","import { Circle, Rectangle } from \"./Ranges.js\";\r\nimport { getDistance } from \"../../Utils/NumberUtils.js\";\r\nconst half = 0.5, double = 2, subdivideCount = 4;\r\nexport class QuadTree {\r\n    constructor(rectangle, capacity) {\r\n        this.rectangle = rectangle;\r\n        this.capacity = capacity;\r\n        this._subdivide = () => {\r\n            const { x, y } = this.rectangle.position, { width, height } = this.rectangle.size, { capacity } = this;\r\n            for (let i = 0; i < subdivideCount; i++) {\r\n                const fixedIndex = i % double;\r\n                this._subs.push(new QuadTree(new Rectangle(x + width * half * fixedIndex, y + height * half * (Math.round(i * half) - fixedIndex), width * half, height * half), capacity));\r\n            }\r\n            this._divided = true;\r\n        };\r\n        this._points = [];\r\n        this._divided = false;\r\n        this._subs = [];\r\n    }\r\n    insert(point) {\r\n        if (!this.rectangle.contains(point.position)) {\r\n            return false;\r\n        }\r\n        if (this._points.length < this.capacity) {\r\n            this._points.push(point);\r\n            return true;\r\n        }\r\n        if (!this._divided) {\r\n            this._subdivide();\r\n        }\r\n        return this._subs.some((sub) => sub.insert(point));\r\n    }\r\n    query(range, check) {\r\n        const res = [];\r\n        if (!range.intersects(this.rectangle)) {\r\n            return [];\r\n        }\r\n        for (const p of this._points) {\r\n            if (!range.contains(p.position) &&\r\n                getDistance(range.position, p.position) > p.particle.getRadius() &&\r\n                (!check || check(p.particle))) {\r\n                continue;\r\n            }\r\n            res.push(p.particle);\r\n        }\r\n        if (this._divided) {\r\n            for (const sub of this._subs) {\r\n                res.push(...sub.query(range, check));\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    queryCircle(position, radius, check) {\r\n        return this.query(new Circle(position.x, position.y, radius), check);\r\n    }\r\n    queryRectangle(position, size, check) {\r\n        return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\r\n    }\r\n}\r\n","import { getLogger, getPosition } from \"../Utils/Utils.js\";\r\nimport { InteractionManager } from \"./Utils/InteractionManager.js\";\r\nimport { Particle } from \"./Particle.js\";\r\nimport { Point } from \"./Utils/Point.js\";\r\nimport { QuadTree } from \"./Utils/QuadTree.js\";\r\nimport { Rectangle } from \"./Utils/Ranges.js\";\r\nimport { errorPrefix } from \"./Utils/Constants.js\";\r\nconst qTreeCapacity = 4, squareExp = 2, defaultRemoveQuantity = 1;\r\nconst qTreeRectangle = (canvasSize) => {\r\n    const { height, width } = canvasSize, posOffset = -0.25, sizeFactor = 1.5;\r\n    return new Rectangle(posOffset * width, posOffset * height, sizeFactor * width, sizeFactor * height);\r\n};\r\nexport class Particles {\r\n    constructor(engine, container) {\r\n        this._addToPool = (...particles) => {\r\n            for (const particle of particles) {\r\n                this._pool.push(particle);\r\n            }\r\n        };\r\n        this._applyDensity = (options, manualCount, group) => {\r\n            const numberOptions = options.number;\r\n            if (!options.number.density?.enable) {\r\n                if (group === undefined) {\r\n                    this._limit = numberOptions.limit.value;\r\n                }\r\n                else if (numberOptions.limit) {\r\n                    this._groupLimits.set(group, numberOptions.limit.value);\r\n                }\r\n                return;\r\n            }\r\n            const densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, minLimit = 0, optParticlesLimit = numberOptions.limit.value > minLimit ? numberOptions.limit.value : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter((t) => t.group === group).length);\r\n            if (group === undefined) {\r\n                this._limit = numberOptions.limit.value * densityFactor;\r\n            }\r\n            else {\r\n                this._groupLimits.set(group, numberOptions.limit.value * densityFactor);\r\n            }\r\n            if (particlesCount < particlesNumber) {\r\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\r\n            }\r\n            else if (particlesCount > particlesNumber) {\r\n                this.removeQuantity(particlesCount - particlesNumber, group);\r\n            }\r\n        };\r\n        this._initDensityFactor = (densityOptions) => {\r\n            const container = this._container, defaultFactor = 1;\r\n            if (!container.canvas.element || !densityOptions.enable) {\r\n                return defaultFactor;\r\n            }\r\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\r\n            return (canvas.width * canvas.height) / (densityOptions.height * densityOptions.width * pxRatio ** squareExp);\r\n        };\r\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\r\n            try {\r\n                let particle = this._pool.pop();\r\n                if (!particle) {\r\n                    particle = new Particle(this._engine, this._container);\r\n                }\r\n                particle.init(this._nextId, position, overrideOptions, group);\r\n                let canAdd = true;\r\n                if (initializer) {\r\n                    canAdd = initializer(particle);\r\n                }\r\n                if (!canAdd) {\r\n                    return;\r\n                }\r\n                this._array.push(particle);\r\n                this._zArray.push(particle);\r\n                this._nextId++;\r\n                this._engine.dispatchEvent(\"particleAdded\", {\r\n                    container: this._container,\r\n                    data: {\r\n                        particle,\r\n                    },\r\n                });\r\n                return particle;\r\n            }\r\n            catch (e) {\r\n                getLogger().warning(`${errorPrefix} adding particle: ${e}`);\r\n            }\r\n        };\r\n        this._removeParticle = (index, group, override) => {\r\n            const particle = this._array[index];\r\n            if (!particle || particle.group !== group) {\r\n                return false;\r\n            }\r\n            const zIdx = this._zArray.indexOf(particle), deleteCount = 1;\r\n            this._array.splice(index, deleteCount);\r\n            this._zArray.splice(zIdx, deleteCount);\r\n            particle.destroy(override);\r\n            this._engine.dispatchEvent(\"particleRemoved\", {\r\n                container: this._container,\r\n                data: {\r\n                    particle,\r\n                },\r\n            });\r\n            this._addToPool(particle);\r\n            return true;\r\n        };\r\n        this._engine = engine;\r\n        this._container = container;\r\n        this._nextId = 0;\r\n        this._array = [];\r\n        this._zArray = [];\r\n        this._pool = [];\r\n        this._limit = 0;\r\n        this._groupLimits = new Map();\r\n        this._needsSort = false;\r\n        this._lastZIndex = 0;\r\n        this._interactionManager = new InteractionManager(engine, container);\r\n        this._pluginsInitialized = false;\r\n        const canvasSize = container.canvas.size;\r\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\r\n        this.movers = [];\r\n        this.updaters = [];\r\n    }\r\n    get count() {\r\n        return this._array.length;\r\n    }\r\n    addManualParticles() {\r\n        const container = this._container, options = container.actualOptions;\r\n        for (const particle of options.manualParticles) {\r\n            this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\r\n        }\r\n    }\r\n    addParticle(position, overrideOptions, group, initializer) {\r\n        const limitOptions = this._container.actualOptions.particles.number.limit, limit = group === undefined ? this._limit : this._groupLimits.get(group) ?? this._limit, currentCount = this.count, minLimit = 0;\r\n        if (limit > minLimit) {\r\n            if (limitOptions.mode === \"delete\") {\r\n                const countOffset = 1, minCount = 0, countToRemove = currentCount + countOffset - limit;\r\n                if (countToRemove > minCount) {\r\n                    this.removeQuantity(countToRemove);\r\n                }\r\n            }\r\n            else if (limitOptions.mode === \"wait\") {\r\n                if (currentCount >= limit) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        return this._pushParticle(position, overrideOptions, group, initializer);\r\n    }\r\n    clear() {\r\n        this._array = [];\r\n        this._zArray = [];\r\n        this._pluginsInitialized = false;\r\n    }\r\n    destroy() {\r\n        this._array = [];\r\n        this._zArray = [];\r\n        this.movers = [];\r\n        this.updaters = [];\r\n    }\r\n    draw(delta) {\r\n        const container = this._container, canvas = container.canvas;\r\n        canvas.clear();\r\n        this.update(delta);\r\n        for (const [, plugin] of container.plugins) {\r\n            canvas.drawPlugin(plugin, delta);\r\n        }\r\n        for (const p of this._zArray) {\r\n            p.draw(delta);\r\n        }\r\n    }\r\n    filter(condition) {\r\n        return this._array.filter(condition);\r\n    }\r\n    find(condition) {\r\n        return this._array.find(condition);\r\n    }\r\n    get(index) {\r\n        return this._array[index];\r\n    }\r\n    handleClickMode(mode) {\r\n        this._interactionManager.handleClickMode(mode);\r\n    }\r\n    async init() {\r\n        const container = this._container, options = container.actualOptions;\r\n        this._lastZIndex = 0;\r\n        this._needsSort = false;\r\n        await this.initPlugins();\r\n        let handled = false;\r\n        for (const [, plugin] of container.plugins) {\r\n            if (plugin.particlesInitialization !== undefined) {\r\n                handled = plugin.particlesInitialization();\r\n            }\r\n            if (handled) {\r\n                break;\r\n            }\r\n        }\r\n        this.addManualParticles();\r\n        if (!handled) {\r\n            const particlesOptions = options.particles, groups = particlesOptions.groups;\r\n            for (const group in groups) {\r\n                const groupOptions = groups[group];\r\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < particlesOptions.number.value; i++, j++) {\r\n                    this.addParticle(undefined, groupOptions, group);\r\n                }\r\n            }\r\n            for (let i = this.count; i < particlesOptions.number.value; i++) {\r\n                this.addParticle();\r\n            }\r\n        }\r\n    }\r\n    async initPlugins() {\r\n        if (this._pluginsInitialized) {\r\n            return;\r\n        }\r\n        const container = this._container;\r\n        this.movers = await this._engine.getMovers(container, true);\r\n        this.updaters = await this._engine.getUpdaters(container, true);\r\n        await this._interactionManager.init();\r\n        for (const [, pathGenerator] of container.pathGenerators) {\r\n            pathGenerator.init(container);\r\n        }\r\n    }\r\n    push(nb, mouse, overrideOptions, group) {\r\n        for (let i = 0; i < nb; i++) {\r\n            this.addParticle(mouse?.position, overrideOptions, group);\r\n        }\r\n    }\r\n    async redraw() {\r\n        this.clear();\r\n        await this.init();\r\n        this.draw({ value: 0, factor: 0 });\r\n    }\r\n    remove(particle, group, override) {\r\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\r\n    }\r\n    removeAt(index, quantity = defaultRemoveQuantity, group, override) {\r\n        const minIndex = 0;\r\n        if (index < minIndex || index > this.count) {\r\n            return;\r\n        }\r\n        let deleted = 0;\r\n        for (let i = index; deleted < quantity && i < this.count; i++) {\r\n            if (this._removeParticle(i--, group, override)) {\r\n                deleted++;\r\n            }\r\n        }\r\n    }\r\n    removeQuantity(quantity, group) {\r\n        const defaultIndex = 0;\r\n        this.removeAt(defaultIndex, quantity, group);\r\n    }\r\n    setDensity() {\r\n        const options = this._container.actualOptions, groups = options.particles.groups, manualCount = 0;\r\n        for (const group in groups) {\r\n            this._applyDensity(groups[group], manualCount, group);\r\n        }\r\n        this._applyDensity(options.particles, options.manualParticles.length);\r\n    }\r\n    setLastZIndex(zIndex) {\r\n        this._lastZIndex = zIndex;\r\n        this._needsSort = this._needsSort || this._lastZIndex < zIndex;\r\n    }\r\n    setResizeFactor(factor) {\r\n        this._resizeFactor = factor;\r\n    }\r\n    update(delta) {\r\n        const container = this._container, particlesToDelete = new Set();\r\n        this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\r\n        for (const [, pathGenerator] of container.pathGenerators) {\r\n            pathGenerator.update();\r\n        }\r\n        for (const [, plugin] of container.plugins) {\r\n            plugin.update?.(delta);\r\n        }\r\n        const resizeFactor = this._resizeFactor;\r\n        for (const particle of this._array) {\r\n            if (resizeFactor && !particle.ignoresResizeRatio) {\r\n                particle.position.x *= resizeFactor.width;\r\n                particle.position.y *= resizeFactor.height;\r\n                particle.initialPosition.x *= resizeFactor.width;\r\n                particle.initialPosition.y *= resizeFactor.height;\r\n            }\r\n            particle.ignoresResizeRatio = false;\r\n            this._interactionManager.reset(particle);\r\n            for (const [, plugin] of this._container.plugins) {\r\n                if (particle.destroyed) {\r\n                    break;\r\n                }\r\n                plugin.particleUpdate?.(particle, delta);\r\n            }\r\n            for (const mover of this.movers) {\r\n                if (mover.isEnabled(particle)) {\r\n                    mover.move(particle, delta);\r\n                }\r\n            }\r\n            if (particle.destroyed) {\r\n                particlesToDelete.add(particle);\r\n                continue;\r\n            }\r\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\r\n        }\r\n        if (particlesToDelete.size) {\r\n            const checkDelete = (p) => !particlesToDelete.has(p);\r\n            this._array = this.filter(checkDelete);\r\n            this._zArray = this._zArray.filter(checkDelete);\r\n            for (const particle of particlesToDelete) {\r\n                this._engine.dispatchEvent(\"particleRemoved\", {\r\n                    container: this._container,\r\n                    data: {\r\n                        particle,\r\n                    },\r\n                });\r\n            }\r\n            this._addToPool(...particlesToDelete);\r\n        }\r\n        this._interactionManager.externalInteract(delta);\r\n        for (const particle of this._array) {\r\n            for (const updater of this.updaters) {\r\n                updater.update(particle, delta);\r\n            }\r\n            if (!particle.destroyed && !particle.spawning) {\r\n                this._interactionManager.particlesInteract(particle, delta);\r\n            }\r\n        }\r\n        delete this._resizeFactor;\r\n        if (this._needsSort) {\r\n            const zArray = this._zArray;\r\n            zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\r\n            const lengthOffset = 1;\r\n            this._lastZIndex = zArray[zArray.length - lengthOffset].position.z;\r\n            this._needsSort = false;\r\n        }\r\n    }\r\n}\r\n","import { getRangeValue } from \"../Utils/NumberUtils.js\";\r\nimport { isSsr } from \"../Utils/Utils.js\";\r\nconst defaultRatio = 1, defaultReduceFactor = 1;\r\nexport class Retina {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.pixelRatio = defaultRatio;\r\n        this.reduceFactor = defaultReduceFactor;\r\n    }\r\n    init() {\r\n        const container = this.container, options = container.actualOptions;\r\n        this.pixelRatio = !options.detectRetina || isSsr() ? defaultRatio : window.devicePixelRatio;\r\n        this.reduceFactor = defaultReduceFactor;\r\n        const ratio = this.pixelRatio, canvas = container.canvas;\r\n        if (canvas.element) {\r\n            const element = canvas.element;\r\n            canvas.size.width = element.offsetWidth * ratio;\r\n            canvas.size.height = element.offsetHeight * ratio;\r\n        }\r\n        const particles = options.particles, moveOptions = particles.move;\r\n        this.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\r\n        this.sizeAnimationSpeed = getRangeValue(particles.size.animation.speed) * ratio;\r\n    }\r\n    initParticle(particle) {\r\n        const options = particle.options, ratio = this.pixelRatio, moveOptions = options.move, moveDistance = moveOptions.distance, props = particle.retina;\r\n        props.moveDrift = getRangeValue(moveOptions.drift) * ratio;\r\n        props.moveSpeed = getRangeValue(moveOptions.speed) * ratio;\r\n        props.sizeAnimationSpeed = getRangeValue(options.size.animation.speed) * ratio;\r\n        const maxDistance = props.maxDistance;\r\n        maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\r\n        maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\r\n        props.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\r\n    }\r\n}\r\n","import { errorPrefix, millisecondsToSeconds } from \"./Utils/Constants.js\";\r\nimport { getLogger, safeIntersectionObserver } from \"../Utils/Utils.js\";\r\nimport { Canvas } from \"./Canvas.js\";\r\nimport { EventListeners } from \"./Utils/EventListeners.js\";\r\nimport { Options } from \"../Options/Classes/Options.js\";\r\nimport { Particles } from \"./Particles.js\";\r\nimport { Retina } from \"./Retina.js\";\r\nimport { getRangeValue } from \"../Utils/NumberUtils.js\";\r\nimport { loadOptions } from \"../Utils/OptionsUtils.js\";\r\nfunction guardCheck(container) {\r\n    return container && !container.destroyed;\r\n}\r\nconst defaultFps = 60;\r\nfunction initDelta(value, fpsLimit = defaultFps, smooth = false) {\r\n    return {\r\n        value,\r\n        factor: smooth ? defaultFps / fpsLimit : (defaultFps * value) / millisecondsToSeconds,\r\n    };\r\n}\r\nfunction loadContainerOptions(engine, container, ...sourceOptionsArr) {\r\n    const options = new Options(engine, container);\r\n    loadOptions(options, ...sourceOptionsArr);\r\n    return options;\r\n}\r\nexport class Container {\r\n    constructor(engine, id, sourceOptions) {\r\n        this._intersectionManager = (entries) => {\r\n            if (!guardCheck(this) || !this.actualOptions.pauseOnOutsideViewport) {\r\n                return;\r\n            }\r\n            for (const entry of entries) {\r\n                if (entry.target !== this.interactivity.element) {\r\n                    continue;\r\n                }\r\n                if (entry.isIntersecting) {\r\n                    void this.play();\r\n                }\r\n                else {\r\n                    this.pause();\r\n                }\r\n            }\r\n        };\r\n        this._nextFrame = (timestamp) => {\r\n            try {\r\n                if (!this._smooth &&\r\n                    this._lastFrameTime !== undefined &&\r\n                    timestamp < this._lastFrameTime + millisecondsToSeconds / this.fpsLimit) {\r\n                    this.draw(false);\r\n                    return;\r\n                }\r\n                this._lastFrameTime ??= timestamp;\r\n                const delta = initDelta(timestamp - this._lastFrameTime, this.fpsLimit, this._smooth);\r\n                this.addLifeTime(delta.value);\r\n                this._lastFrameTime = timestamp;\r\n                if (delta.value > millisecondsToSeconds) {\r\n                    this.draw(false);\r\n                    return;\r\n                }\r\n                this.particles.draw(delta);\r\n                if (!this.alive()) {\r\n                    this.destroy();\r\n                    return;\r\n                }\r\n                if (this.animationStatus) {\r\n                    this.draw(false);\r\n                }\r\n            }\r\n            catch (e) {\r\n                getLogger().error(`${errorPrefix} in animation loop`, e);\r\n            }\r\n        };\r\n        this._engine = engine;\r\n        this.id = Symbol(id);\r\n        this.fpsLimit = 120;\r\n        this._smooth = false;\r\n        this._delay = 0;\r\n        this._duration = 0;\r\n        this._lifeTime = 0;\r\n        this._firstStart = true;\r\n        this.started = false;\r\n        this.destroyed = false;\r\n        this._paused = true;\r\n        this._lastFrameTime = 0;\r\n        this.zLayers = 100;\r\n        this.pageHidden = false;\r\n        this._sourceOptions = sourceOptions;\r\n        this._initialSourceOptions = sourceOptions;\r\n        this.retina = new Retina(this);\r\n        this.canvas = new Canvas(this);\r\n        this.particles = new Particles(this._engine, this);\r\n        this.pathGenerators = new Map();\r\n        this.interactivity = {\r\n            mouse: {\r\n                clicking: false,\r\n                inside: false,\r\n            },\r\n        };\r\n        this.plugins = new Map();\r\n        this.effectDrawers = new Map();\r\n        this.shapeDrawers = new Map();\r\n        this._options = loadContainerOptions(this._engine, this);\r\n        this.actualOptions = loadContainerOptions(this._engine, this);\r\n        this._eventListeners = new EventListeners(this);\r\n        this._intersectionObserver = safeIntersectionObserver((entries) => this._intersectionManager(entries));\r\n        this._engine.dispatchEvent(\"containerBuilt\", { container: this });\r\n    }\r\n    get animationStatus() {\r\n        return !this._paused && !this.pageHidden && guardCheck(this);\r\n    }\r\n    get options() {\r\n        return this._options;\r\n    }\r\n    get sourceOptions() {\r\n        return this._sourceOptions;\r\n    }\r\n    addClickHandler(callback) {\r\n        if (!guardCheck(this)) {\r\n            return;\r\n        }\r\n        const el = this.interactivity.element;\r\n        if (!el) {\r\n            return;\r\n        }\r\n        const clickOrTouchHandler = (e, pos, radius) => {\r\n            if (!guardCheck(this)) {\r\n                return;\r\n            }\r\n            const pxRatio = this.retina.pixelRatio, posRetina = {\r\n                x: pos.x * pxRatio,\r\n                y: pos.y * pxRatio,\r\n            }, particles = this.particles.quadTree.queryCircle(posRetina, radius * pxRatio);\r\n            callback(e, particles);\r\n        };\r\n        const clickHandler = (e) => {\r\n            if (!guardCheck(this)) {\r\n                return;\r\n            }\r\n            const mouseEvent = e, pos = {\r\n                x: mouseEvent.offsetX || mouseEvent.clientX,\r\n                y: mouseEvent.offsetY || mouseEvent.clientY,\r\n            }, radius = 1;\r\n            clickOrTouchHandler(e, pos, radius);\r\n        };\r\n        const touchStartHandler = () => {\r\n            if (!guardCheck(this)) {\r\n                return;\r\n            }\r\n            touched = true;\r\n            touchMoved = false;\r\n        };\r\n        const touchMoveHandler = () => {\r\n            if (!guardCheck(this)) {\r\n                return;\r\n            }\r\n            touchMoved = true;\r\n        };\r\n        const touchEndHandler = (e) => {\r\n            if (!guardCheck(this)) {\r\n                return;\r\n            }\r\n            if (touched && !touchMoved) {\r\n                const touchEvent = e;\r\n                const lengthOffset = 1;\r\n                let lastTouch = touchEvent.touches[touchEvent.touches.length - lengthOffset];\r\n                if (!lastTouch) {\r\n                    lastTouch = touchEvent.changedTouches[touchEvent.changedTouches.length - lengthOffset];\r\n                    if (!lastTouch) {\r\n                        return;\r\n                    }\r\n                }\r\n                const element = this.canvas.element, canvasRect = element ? element.getBoundingClientRect() : undefined, minCoordinate = 0, pos = {\r\n                    x: lastTouch.clientX - (canvasRect ? canvasRect.left : minCoordinate),\r\n                    y: lastTouch.clientY - (canvasRect ? canvasRect.top : minCoordinate),\r\n                };\r\n                clickOrTouchHandler(e, pos, Math.max(lastTouch.radiusX, lastTouch.radiusY));\r\n            }\r\n            touched = false;\r\n            touchMoved = false;\r\n        };\r\n        const touchCancelHandler = () => {\r\n            if (!guardCheck(this)) {\r\n                return;\r\n            }\r\n            touched = false;\r\n            touchMoved = false;\r\n        };\r\n        let touched = false, touchMoved = false;\r\n        el.addEventListener(\"click\", clickHandler);\r\n        el.addEventListener(\"touchstart\", touchStartHandler);\r\n        el.addEventListener(\"touchmove\", touchMoveHandler);\r\n        el.addEventListener(\"touchend\", touchEndHandler);\r\n        el.addEventListener(\"touchcancel\", touchCancelHandler);\r\n    }\r\n    addLifeTime(value) {\r\n        this._lifeTime += value;\r\n    }\r\n    addPath(key, generator, override = false) {\r\n        if (!guardCheck(this) || (!override && this.pathGenerators.has(key))) {\r\n            return false;\r\n        }\r\n        this.pathGenerators.set(key, generator);\r\n        return true;\r\n    }\r\n    alive() {\r\n        return !this._duration || this._lifeTime <= this._duration;\r\n    }\r\n    destroy() {\r\n        if (!guardCheck(this)) {\r\n            return;\r\n        }\r\n        this.stop();\r\n        this.particles.destroy();\r\n        this.canvas.destroy();\r\n        for (const [, effectDrawer] of this.effectDrawers) {\r\n            effectDrawer.destroy?.(this);\r\n        }\r\n        for (const [, shapeDrawer] of this.shapeDrawers) {\r\n            shapeDrawer.destroy?.(this);\r\n        }\r\n        for (const key of this.effectDrawers.keys()) {\r\n            this.effectDrawers.delete(key);\r\n        }\r\n        for (const key of this.shapeDrawers.keys()) {\r\n            this.shapeDrawers.delete(key);\r\n        }\r\n        this._engine.clearPlugins(this);\r\n        this.destroyed = true;\r\n        const mainArr = this._engine.dom(), idx = mainArr.findIndex((t) => t === this), minIndex = 0;\r\n        if (idx >= minIndex) {\r\n            const deleteCount = 1;\r\n            mainArr.splice(idx, deleteCount);\r\n        }\r\n        this._engine.dispatchEvent(\"containerDestroyed\", { container: this });\r\n    }\r\n    draw(force) {\r\n        if (!guardCheck(this)) {\r\n            return;\r\n        }\r\n        let refreshTime = force;\r\n        const frame = (timestamp) => {\r\n            if (refreshTime) {\r\n                this._lastFrameTime = undefined;\r\n                refreshTime = false;\r\n            }\r\n            this._nextFrame(timestamp);\r\n        };\r\n        this._drawAnimationFrame = requestAnimationFrame((timestamp) => frame(timestamp));\r\n    }\r\n    async export(type, options = {}) {\r\n        for (const [, plugin] of this.plugins) {\r\n            if (!plugin.export) {\r\n                continue;\r\n            }\r\n            const res = await plugin.export(type, options);\r\n            if (!res.supported) {\r\n                continue;\r\n            }\r\n            return res.blob;\r\n        }\r\n        getLogger().error(`${errorPrefix} - Export plugin with type ${type} not found`);\r\n    }\r\n    handleClickMode(mode) {\r\n        if (!guardCheck(this)) {\r\n            return;\r\n        }\r\n        this.particles.handleClickMode(mode);\r\n        for (const [, plugin] of this.plugins) {\r\n            plugin.handleClickMode?.(mode);\r\n        }\r\n    }\r\n    async init() {\r\n        if (!guardCheck(this)) {\r\n            return;\r\n        }\r\n        const effects = this._engine.getSupportedEffects();\r\n        for (const type of effects) {\r\n            const drawer = this._engine.getEffectDrawer(type);\r\n            if (drawer) {\r\n                this.effectDrawers.set(type, drawer);\r\n            }\r\n        }\r\n        const shapes = this._engine.getSupportedShapes();\r\n        for (const type of shapes) {\r\n            const drawer = this._engine.getShapeDrawer(type);\r\n            if (drawer) {\r\n                this.shapeDrawers.set(type, drawer);\r\n            }\r\n        }\r\n        await this.particles.initPlugins();\r\n        this._options = loadContainerOptions(this._engine, this, this._initialSourceOptions, this.sourceOptions);\r\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\r\n        const availablePlugins = await this._engine.getAvailablePlugins(this);\r\n        for (const [id, plugin] of availablePlugins) {\r\n            this.plugins.set(id, plugin);\r\n        }\r\n        this.retina.init();\r\n        await this.canvas.init();\r\n        this.updateActualOptions();\r\n        this.canvas.initBackground();\r\n        this.canvas.resize();\r\n        this.zLayers = this.actualOptions.zLayers;\r\n        this._duration = getRangeValue(this.actualOptions.duration) * millisecondsToSeconds;\r\n        this._delay = getRangeValue(this.actualOptions.delay) * millisecondsToSeconds;\r\n        this._lifeTime = 0;\r\n        const defaultFpsLimit = 120, minFpsLimit = 0;\r\n        this.fpsLimit = this.actualOptions.fpsLimit > minFpsLimit ? this.actualOptions.fpsLimit : defaultFpsLimit;\r\n        this._smooth = this.actualOptions.smooth;\r\n        for (const [, drawer] of this.effectDrawers) {\r\n            await drawer.init?.(this);\r\n        }\r\n        for (const [, drawer] of this.shapeDrawers) {\r\n            await drawer.init?.(this);\r\n        }\r\n        for (const [, plugin] of this.plugins) {\r\n            await plugin.init?.();\r\n        }\r\n        this._engine.dispatchEvent(\"containerInit\", { container: this });\r\n        await this.particles.init();\r\n        this.particles.setDensity();\r\n        for (const [, plugin] of this.plugins) {\r\n            plugin.particlesSetup?.();\r\n        }\r\n        this._engine.dispatchEvent(\"particlesSetup\", { container: this });\r\n    }\r\n    async loadTheme(name) {\r\n        if (!guardCheck(this)) {\r\n            return;\r\n        }\r\n        this._currentTheme = name;\r\n        await this.refresh();\r\n    }\r\n    pause() {\r\n        if (!guardCheck(this)) {\r\n            return;\r\n        }\r\n        if (this._drawAnimationFrame !== undefined) {\r\n            cancelAnimationFrame(this._drawAnimationFrame);\r\n            delete this._drawAnimationFrame;\r\n        }\r\n        if (this._paused) {\r\n            return;\r\n        }\r\n        for (const [, plugin] of this.plugins) {\r\n            plugin.pause?.();\r\n        }\r\n        if (!this.pageHidden) {\r\n            this._paused = true;\r\n        }\r\n        this._engine.dispatchEvent(\"containerPaused\", { container: this });\r\n    }\r\n    play(force) {\r\n        if (!guardCheck(this)) {\r\n            return;\r\n        }\r\n        const needsUpdate = this._paused || force;\r\n        if (this._firstStart && !this.actualOptions.autoPlay) {\r\n            this._firstStart = false;\r\n            return;\r\n        }\r\n        if (this._paused) {\r\n            this._paused = false;\r\n        }\r\n        if (needsUpdate) {\r\n            for (const [, plugin] of this.plugins) {\r\n                if (plugin.play) {\r\n                    plugin.play();\r\n                }\r\n            }\r\n        }\r\n        this._engine.dispatchEvent(\"containerPlay\", { container: this });\r\n        this.draw(needsUpdate ?? false);\r\n    }\r\n    async refresh() {\r\n        if (!guardCheck(this)) {\r\n            return;\r\n        }\r\n        this.stop();\r\n        return this.start();\r\n    }\r\n    async reset() {\r\n        if (!guardCheck(this)) {\r\n            return;\r\n        }\r\n        this._initialSourceOptions = undefined;\r\n        this._options = loadContainerOptions(this._engine, this);\r\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\r\n        return this.refresh();\r\n    }\r\n    async start() {\r\n        if (!guardCheck(this) || this.started) {\r\n            return;\r\n        }\r\n        await this.init();\r\n        this.started = true;\r\n        await new Promise((resolve) => {\r\n            const start = async () => {\r\n                this._eventListeners.addListeners();\r\n                if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\r\n                    this._intersectionObserver.observe(this.interactivity.element);\r\n                }\r\n                for (const [, plugin] of this.plugins) {\r\n                    await plugin.start?.();\r\n                }\r\n                this._engine.dispatchEvent(\"containerStarted\", { container: this });\r\n                this.play();\r\n                resolve();\r\n            };\r\n            this._delayTimeout = setTimeout(() => void start(), this._delay);\r\n        });\r\n    }\r\n    stop() {\r\n        if (!guardCheck(this) || !this.started) {\r\n            return;\r\n        }\r\n        if (this._delayTimeout) {\r\n            clearTimeout(this._delayTimeout);\r\n            delete this._delayTimeout;\r\n        }\r\n        this._firstStart = true;\r\n        this.started = false;\r\n        this._eventListeners.removeListeners();\r\n        this.pause();\r\n        this.particles.clear();\r\n        this.canvas.stop();\r\n        if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\r\n            this._intersectionObserver.unobserve(this.interactivity.element);\r\n        }\r\n        for (const [, plugin] of this.plugins) {\r\n            plugin.stop?.();\r\n        }\r\n        for (const key of this.plugins.keys()) {\r\n            this.plugins.delete(key);\r\n        }\r\n        this._sourceOptions = this._options;\r\n        this._engine.dispatchEvent(\"containerStopped\", { container: this });\r\n    }\r\n    updateActualOptions() {\r\n        this.actualOptions.responsive = [];\r\n        const newMaxWidth = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);\r\n        this.actualOptions.setTheme(this._currentTheme);\r\n        if (this._responsiveMaxWidth === newMaxWidth) {\r\n            return false;\r\n        }\r\n        this._responsiveMaxWidth = newMaxWidth;\r\n        return true;\r\n    }\r\n}\r\n"],"names":["setTransformValue","factor","newFactor","key","newValue","defaultValue","undefined","setStyle","canvas","style","important","element","elementStyle","value","setProperty","Canvas","constructor","container","this","_applyPostDrawUpdaters","particle","updater","_postDrawUpdaters","afterDraw","_applyPreDrawUpdaters","ctx","radius","zOpacity","colorStyles","transform","_preDrawUpdaters","getColorStyles","fill","stroke","getTransformValues","updaterTransform","beforeDraw","_applyResizePlugins","plugin","_resizePlugins","resize","_getPluginParticleColors","fColor","sColor","_colorPlugins","particleFillColor","rangeColorToHsl","particleStrokeColor","_initCover","async","options","actualOptions","cover","backgroundMask","color","coverRgb","rangeColorToRgb","coverColor","a","opacity","_coverColorStyle","getStyleFromRgb","Promise","resolve","reject","image","img","document","createElement","addEventListener","_coverImage","evt","error","src","_initStyle","_fullScreen","_originalStyle","deepExtend","_setFullScreenStyle","_resetOriginalStyle","_initTrail","trail","particles","move","trailFill","enable","factorNumerator","length","fillColor","_trailFill","_paintBase","baseColor","draw","paintBase","size","_paintImage","paintImage","_repairStyle","_safeMutationObserver","observer","disconnect","initBackground","observe","attributes","originalStyle","callback","_mutationObserver","radix","position","zIndex","fullScreen","toString","top","left","width","height","_context","_generated","clear","minimumLength","paint","destroy","stop","remove","cb","drawAsync","drawParticle","delta","spawning","destroyed","getRadius","minimumSize","pfColor","getFillColor","psColor","getStrokeColor","zIndexOptions","zIndexFactorOffset","zIndexFactor","zOpacityFactor","opacityRate","defaultOpacity","bubble","strokeOpacity","zStrokeOpacity","getStyleFromHsl","context","composite","sizeRate","shadow","drawParticlePlugin","drawPlugin","init","obs","safeMutationObserver","records","record","type","attributeName","e","getLogger","initUpdaters","initPlugins","background","backgroundColor","backgroundImage","backgroundPosition","backgroundRepeat","repeat","backgroundSize","plugins","push","updaters","loadCanvas","dataset","generatedAttribute","ariaHidden","offsetHeight","offsetWidth","getContext","retina","pxRatio","pixelRatio","newSize","oldSize","started","setResizeFactor","windowResize","needsRefresh","updateActualOptions","setDensity","refresh","double","manageListener","event","handler","add","addOptions","passive","isBoolean","capture","removeOptions","removeEventListener","EventListeners","_doMouseTouchClick","_canPush","mouseInteractivity","interactivity","mouse","mousePos","clickPosition","clickTime","Date","getTime","onClick","events","executeOnSingleOrMultiple","mode","handleClickMode","touchDelay","setTimeout","_mouseTouchFinish","_handleThemeChange","mediaEvent","defaultThemes","themeName","matches","dark","light","theme","themes","find","name","default","auto","loadTheme","_handleVisibilityChange","pauseOnBlur","hidden","pageHidden","pause","animationStatus","play","_handleWindowResize","_resizeTimeout","clearTimeout","handleResize","delay","millisecondsToSeconds","_manageInteractivityListeners","mouseLeaveTmpEvent","handlers","_handlers","interactivityEl","html","canvasEl","pointerEvents","onHover","mouseMoveEvent","mouseMove","touchStartEvent","touchStart","touchMoveEvent","touchMove","touchEndEvent","touchEndClick","mouseUpEvent","mouseUp","mouseDownEvent","mouseDown","touchEnd","mouseLeave","touchCancelEvent","touchCancel","_manageListeners","detectType","detectsOn","mouseLeaveEvent","window","mouseOutEvent","parentElement","parentNode","_manageMediaMatch","_manageResize","visibilityChangeEvent","visibilityChange","mediaMatch","safeMatchMedia","addListener","oldThemeChange","removeListener","themeChange","ResizeObserver","resizeEvent","_resizeObserver","unobserve","entries","entry","target","_mouseDown","clicking","downPosition","_mouseTouchClick","inside","handled","mousePosition","clickPositionValid","status","_mouseTouchMove","pos","startsWith","mouseEvent","clientRect","getBoundingClientRect","x","clientX","y","clientY","source","currentTarget","sourceRect","targetRect","canvasRect","offsetX","offsetY","touchEvent","lengthOffset","lastTouch","touches","defaultCoordinate","_touchEnd","Array","from","changedTouches","touch","_touches","delete","identifier","_touchEndClick","_touchStart","set","performance","now","Map","addListeners","removeListeners","InteractionManager","engine","_engine","_interactors","_externalInteractors","_particleInteractors","externalInteract","interactor","isEnabled","interact","getInteractors","particlesInteract","reset","defaultRetryCount","half","squareExp","loadEffectData","effect","effectOptions","id","reduceDuplicates","effectData","close","itemFromSingleOrMultiple","loadShapeData","shape","shapeOptions","shapeData","fixOutMode","data","isInArray","outMode","checkModes","diameter","coord","maxCoord","setCb","Particle","_calcPosition","tryCount","pluginPos","particlePosition","Vector3d","create","canvasSize","exactPosition","calcExactPositionOrRandomFromSize","outModes","fixHorizontal","fixVertical","right","bottom","_checkOverlap","increment","_calculateVelocity","baseVelocity","getParticleBaseVelocity","direction","res","copy","moveOptions","rad","degToRad","getRangeValue","angle","radOffset","offset","range","straight","randomInRange","setRangeValue","random","speed","getRandom","collisionsOptions","collisions","overlapOptions","overlap","retries","minRetries","Error","errorPrefix","getDistance","_getRollColor","roll","backColor","alter","rollFactor","none","backFactor","horizontal","vertical","backSum","Math","PI","rolled","floor","alterHsl","_initPosition","zIndexValue","minZ","clamp","zLayers","initialPosition","defaultRadius","moveCenter","getPosition","center","getParticleDirectionAngle","outType","Vector","origin","override","unbreakable","inRange","slow","pathGenerator","shapeDrawer","shapeDrawers","get","particleDestroy","particleDestroyed","dispatchEvent","getHslFromAnimation","getMass","z","strokeColor","overrideOptions","group","effectClose","effectFill","shapeClose","shapeFill","pathRotation","lastPathTime","rotation","misplaced","maxDistance","ignoresResizeRatio","mainOptions","particlesOptions","loadParticlesOptions","effectType","shapeType","overrideEffectType","load","overrideShapeType","Interactivity","pathOptions","path","pathDelay","generator","getPathGenerator","addPath","initParticle","initParticleNumericAnimationValue","initialVelocity","velocity","decayOffset","moveDecay","decay","setLastZIndex","sides","effectDrawer","effectDrawers","getEffectDrawer","loadEffect","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","shadowColor","mover","movers","particleInit","particleCreated","isInsideCanvas","isVisible","Point","subdivideCount","QuadTree","rectangle","capacity","_subdivide","i","fixedIndex","_subs","Rectangle","round","_divided","_points","insert","point","contains","some","sub","query","check","intersects","p","queryCircle","Circle","queryRectangle","qTreeCapacity","defaultRemoveQuantity","qTreeRectangle","posOffset","sizeFactor","Particles","_addToPool","_pool","_applyDensity","manualCount","numberOptions","number","density","_limit","limit","_groupLimits","densityFactor","_initDensityFactor","optParticlesNumber","minLimit","optParticlesLimit","particlesNumber","min","particlesCount","count","filter","t","abs","removeQuantity","densityOptions","_container","defaultFactor","_pushParticle","initializer","pop","_nextId","canAdd","_array","_zArray","warning","_removeParticle","index","zIdx","indexOf","deleteCount","splice","_needsSort","_lastZIndex","_interactionManager","_pluginsInitialized","quadTree","addManualParticles","manualParticles","addParticle","limitOptions","currentCount","countOffset","minCount","countToRemove","update","condition","particlesInitialization","groups","groupOptions","j","getMovers","getUpdaters","pathGenerators","nb","redraw","removeAt","quantity","minIndex","deleted","defaultIndex","_resizeFactor","particlesToDelete","Set","resizeFactor","particleUpdate","checkDelete","has","zArray","sort","b","defaultRatio","defaultReduceFactor","Retina","reduceFactor","detectRetina","isSsr","devicePixelRatio","ratio","maxSpeed","gravity","sizeAnimationSpeed","animation","moveDistance","distance","props","moveDrift","drift","moveSpeed","guardCheck","defaultFps","initDelta","fpsLimit","smooth","loadContainerOptions","sourceOptionsArr","Options","loadOptions","Container","sourceOptions","_intersectionManager","pauseOnOutsideViewport","isIntersecting","_nextFrame","timestamp","_smooth","_lastFrameTime","addLifeTime","alive","Symbol","_delay","_duration","_lifeTime","_firstStart","_paused","_sourceOptions","_initialSourceOptions","_options","_eventListeners","_intersectionObserver","safeIntersectionObserver","addClickHandler","el","clickOrTouchHandler","posRetina","clickHandler","touchStartHandler","touched","touchMoved","touchMoveHandler","touchEndHandler","minCoordinate","max","radiusX","radiusY","touchCancelHandler","keys","clearPlugins","mainArr","dom","idx","findIndex","force","refreshTime","frame","_drawAnimationFrame","requestAnimationFrame","export","supported","blob","effects","getSupportedEffects","drawer","shapes","getSupportedShapes","availablePlugins","getAvailablePlugins","duration","defaultFpsLimit","minFpsLimit","particlesSetup","_currentTheme","cancelAnimationFrame","needsUpdate","autoPlay","start","HTMLElement","_delayTimeout","responsive","newMaxWidth","setResponsive","setTheme","_responsiveMaxWidth"],"sourceRoot":""}