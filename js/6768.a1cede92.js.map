{"version":3,"file":"js/6768.a1cede92.js","mappings":"sNAAO,SAASA,EAAUC,GACtB,MAAM,QAAEC,EAAO,SAAEC,EAAQ,OAAEC,EAAM,QAAEC,GAAYJ,EAAMK,EAAYH,EAASG,UAAWC,EAAS,EAAGC,EAAWJ,EAASG,EAAQE,EAAgBP,EAAQQ,YAChJJ,IAGLJ,EAAQQ,YAAcL,EACtBH,EAAQS,UAAUL,GAAYF,GAASA,EAAQI,EAAUA,GACzDN,EAAQQ,YAAcD,EAC1B,C,cCLA,MAAMG,EAAc,+FACb,MAAMC,EACTC,WAAAA,GACIC,KAAKC,gBAAkB,IAAIC,GAC/B,CACAC,OAAAA,GACI,IAAK,MAAOC,EAAKb,KAAcS,KAAKC,gBAC5BV,aAAqBc,cACrBd,GAAWe,QACXN,KAAKC,gBAAgBM,OAAOH,GAGxC,CACAI,IAAAA,CAAKtB,GACDD,EAAUC,EACd,CACA,UAAMuB,CAAKC,GACP,MAAMC,EAAUD,EAAUE,cAC1B,IAAKC,EAAAA,EAAWC,MAAMC,IAAMC,EAAAA,EAAAA,IAAUD,EAAGJ,EAAQM,UAAUC,MAAMC,QAC7D,OAEJ,MAAMC,EAAW,EAACC,EAAAA,EAAAA,IAASxB,IAAeyB,EAAeT,EAAAA,EACpDU,KAAKR,GAAMJ,EAAQM,UAAUC,MAAMP,QAAQI,KAC3CD,MAAMC,KAAQA,IACfO,IACAE,EAAAA,EAAAA,IAA0BF,GAAeJ,IACjCA,EAAMO,MACNL,EAASM,MAAKL,EAAAA,EAAAA,IAASH,EAAMO,MACjC,UAGFE,QAAQC,IAAIR,EACtB,CACAS,eAAAA,CAAgBzC,UACLA,EAASG,SACpB,CACAuC,YAAAA,CAAapB,EAAWtB,GACpB,MAAMI,EAAS,EAAGuC,EAAY3C,EAAS2C,UACvC,IAAKA,GAAWC,MACZ,OAEJ,MAAMC,GAAQC,EAAAA,EAAAA,IAAyBH,EAAUC,MAAO5C,EAAS+C,iBAAkBV,EAAOM,EAAUN,MAAQ5B,EAC5G,IAAKoC,EACD,OAEJ,MAAM7B,EAAO,GAAE6B,KAASR,IAAQW,EAAepC,KAAKC,gBAAgBoC,IAAIjC,GACxE,GAAIgC,EAEA,YADAhD,EAASG,UAAY6C,GAGzB,MAAME,GAAaC,EAAAA,EAAAA,IAAYnD,EAASoD,KAAKR,OAASxC,EACtD,IAAID,EACJ,MAAMkD,GAAUF,EAAAA,EAAAA,IAAYnD,EAASoD,KAAKR,OAC1C,GAA+B,qBAApBU,gBAAiC,CACxC,MAAMC,EAAS,IAAID,gBAAgBJ,EAAYA,GAAanD,EAAUwD,EAAOC,WAAW,MACxF,IAAKzD,EACD,OAEJA,EAAQsC,KAAQ,OAAMgB,EAAUjD,OAAYiC,IAC5CtC,EAAQ0D,aAAe,SACvB1D,EAAQ2D,UAAY,SACpB3D,EAAQ4D,SAASd,EAAOQ,EAASA,GACjClD,EAAYoD,EAAOK,uBACvB,KACK,CACD,MAAML,EAASM,SAASC,cAAc,UACtCP,EAAOQ,MAAQb,EACfK,EAAOS,OAASd,EAChB,MAAMnD,EAAUwD,EAAOC,WAAW,MAClC,IAAKzD,EACD,OAEJA,EAAQsC,KAAQ,OAAMgB,EAAUjD,OAAYiC,IAC5CtC,EAAQ0D,aAAe,SACvB1D,EAAQ2D,UAAY,SACpB3D,EAAQ4D,SAASd,EAAOQ,EAASA,GACjClD,EAAYoD,CAChB,CACA3C,KAAKC,gBAAgBoD,IAAIjD,EAAKb,GAC9BH,EAASG,UAAYA,CACzB,E","sources":["webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/shape-emoji/browser/Utils.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/shape-emoji/browser/EmojiDrawer.js"],"sourcesContent":["export function drawEmoji(data) {\r\n    const { context, particle, radius, opacity } = data, emojiData = particle.emojiData, double = 2, diameter = radius * double, previousAlpha = context.globalAlpha;\r\n    if (!emojiData) {\r\n        return;\r\n    }\r\n    context.globalAlpha = opacity;\r\n    context.drawImage(emojiData, -radius, -radius, diameter, diameter);\r\n    context.globalAlpha = previousAlpha;\r\n}\r\n","import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\r\nimport { drawEmoji } from \"./Utils.js\";\r\nimport { validTypes } from \"./Constants.js\";\r\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"';\r\nexport class EmojiDrawer {\r\n    constructor() {\r\n        this._emojiShapeDict = new Map();\r\n    }\r\n    destroy() {\r\n        for (const [key, emojiData] of this._emojiShapeDict) {\r\n            if (emojiData instanceof ImageBitmap) {\r\n                emojiData?.close();\r\n                this._emojiShapeDict.delete(key);\r\n            }\r\n        }\r\n    }\r\n    draw(data) {\r\n        drawEmoji(data);\r\n    }\r\n    async init(container) {\r\n        const options = container.actualOptions;\r\n        if (!validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\r\n            return;\r\n        }\r\n        const promises = [loadFont(defaultFont)], shapeOptions = validTypes\r\n            .map((t) => options.particles.shape.options[t])\r\n            .find((t) => !!t);\r\n        if (shapeOptions) {\r\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\r\n                if (shape.font) {\r\n                    promises.push(loadFont(shape.font));\r\n                }\r\n            });\r\n        }\r\n        await Promise.all(promises);\r\n    }\r\n    particleDestroy(particle) {\r\n        delete particle.emojiData;\r\n    }\r\n    particleInit(container, particle) {\r\n        const double = 2, shapeData = particle.shapeData;\r\n        if (!shapeData?.value) {\r\n            return;\r\n        }\r\n        const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData), font = shapeData.font ?? defaultFont;\r\n        if (!emoji) {\r\n            return;\r\n        }\r\n        const key = `${emoji}_${font}`, existingData = this._emojiShapeDict.get(key);\r\n        if (existingData) {\r\n            particle.emojiData = existingData;\r\n            return;\r\n        }\r\n        const canvasSize = getRangeMax(particle.size.value) * double;\r\n        let emojiData;\r\n        const maxSize = getRangeMax(particle.size.value);\r\n        if (typeof OffscreenCanvas !== \"undefined\") {\r\n            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext(\"2d\");\r\n            if (!context) {\r\n                return;\r\n            }\r\n            context.font = `400 ${maxSize * double}px ${font}`;\r\n            context.textBaseline = \"middle\";\r\n            context.textAlign = \"center\";\r\n            context.fillText(emoji, maxSize, maxSize);\r\n            emojiData = canvas.transferToImageBitmap();\r\n        }\r\n        else {\r\n            const canvas = document.createElement(\"canvas\");\r\n            canvas.width = canvasSize;\r\n            canvas.height = canvasSize;\r\n            const context = canvas.getContext(\"2d\");\r\n            if (!context) {\r\n                return;\r\n            }\r\n            context.font = `400 ${maxSize * double}px ${font}`;\r\n            context.textBaseline = \"middle\";\r\n            context.textAlign = \"center\";\r\n            context.fillText(emoji, maxSize, maxSize);\r\n            emojiData = canvas;\r\n        }\r\n        this._emojiShapeDict.set(key, emojiData);\r\n        particle.emojiData = emojiData;\r\n    }\r\n}\r\n"],"names":["drawEmoji","data","context","particle","radius","opacity","emojiData","double","diameter","previousAlpha","globalAlpha","drawImage","defaultFont","EmojiDrawer","constructor","this","_emojiShapeDict","Map","destroy","key","ImageBitmap","close","delete","draw","init","container","options","actualOptions","validTypes","find","t","isInArray","particles","shape","type","promises","loadFont","shapeOptions","map","executeOnSingleOrMultiple","font","push","Promise","all","particleDestroy","particleInit","shapeData","value","emoji","itemFromSingleOrMultiple","randomIndexData","existingData","get","canvasSize","getRangeMax","size","maxSize","OffscreenCanvas","canvas","getContext","textBaseline","textAlign","fillText","transferToImageBitmap","document","createElement","width","height","set"],"sourceRoot":""}