{"version":3,"file":"js/3880.5d889115.js","mappings":"gNACO,MAAMA,EACTC,WAAAA,GACIC,KAAKC,QAAS,EACdD,KAAKE,MAAQ,EACbF,KAAKG,MAAQ,EACbH,KAAKI,MAAO,CAChB,CACAC,IAAAA,CAAKC,GACIA,SAGeC,IAAhBD,EAAKL,SACLD,KAAKC,OAASK,EAAKL,aAEJM,IAAfD,EAAKJ,QACLF,KAAKE,OAAQM,EAAAA,EAAAA,IAAcF,EAAKJ,aAEjBK,IAAfD,EAAKH,QACLH,KAAKG,OAAQK,EAAAA,EAAAA,IAAcF,EAAKH,aAElBI,IAAdD,EAAKF,OACLJ,KAAKI,KAAOE,EAAKF,MAEzB,ECtBG,MAAMK,UAAeC,EAAAA,GACxBX,WAAAA,GACIY,QACAX,KAAKY,UAAY,IAAId,EACrBE,KAAKa,UAAY,YACjBb,KAAKc,MAAO,EACZd,KAAKe,MAAQ,CACjB,CACAV,IAAAA,CAAKC,GACIA,IAGLK,MAAMN,KAAKC,QACYC,IAAnBD,EAAKO,YACLb,KAAKa,UAAYP,EAAKO,WAE1Bb,KAAKY,UAAUP,KAAKC,EAAKM,gBACPL,IAAdD,EAAKQ,OACLd,KAAKc,KAAOR,EAAKQ,MAEzB,ECpBJ,MAAME,EAAS,EAAGC,EAAWC,KAAKC,GAAKH,EAAQI,EAAW,EAAGC,EAAc,IACpE,MAAMC,EACTvB,WAAAA,CAAYwB,GACRvB,KAAKuB,UAAYA,CACrB,CACAC,IAAAA,CAAKC,GACD,MAAMC,EAAgBD,EAASE,QAAQC,OACvC,IAAKF,EACD,OAEJD,EAASG,OAAS,CACd3B,OAAQyB,EAAcd,UAAUX,OAChCc,OAAOc,EAAAA,EAAAA,KAASC,EAAAA,EAAAA,IAAcJ,EAAcX,QAC5CgB,IAAK,EACLC,IAAKf,GAETQ,EAASQ,aAAeP,EAAcZ,KACtC,IAAIoB,EAAkBR,EAAcb,UACpC,GAAwB,WAApBqB,EAA8B,CAC9B,MAAMC,EAAQjB,KAAKkB,OAAMC,EAAAA,EAAAA,MAAcrB,GAASsB,EAAW,EAC3DJ,EAAkBC,EAAQG,EAAW,oBAAsB,WAC/D,CACA,OAAQJ,GACJ,IAAK,oBACL,IAAK,mBACDT,EAASG,OAAOW,OAAS,aACzB,MACJ,IAAK,YACDd,EAASG,OAAOW,OAAS,aACzB,MAER,MAAMC,EAAkBd,EAAcd,UAClC4B,EAAgBvC,SAChBwB,EAASG,OAAOzB,MAAQiB,GAAWU,EAAAA,EAAAA,IAAcU,EAAgBrC,OACjEsB,EAASG,OAAOa,UACXX,EAAAA,EAAAA,IAAcU,EAAgBtC,OAASmB,EAAerB,KAAKuB,UAAUmB,OAAOC,aAC5EH,EAAgBpC,OACjBqB,EAASG,OAAOa,WAAYJ,EAAAA,EAAAA,QAGpCZ,EAASmB,SAAWnB,EAASG,OAAOb,KACxC,CACA8B,SAAAA,CAAUpB,GACN,MAAMG,EAASH,EAASE,QAAQC,OAChC,QAAKA,KAGGH,EAASqB,YAAcrB,EAASsB,UAAYnB,EAAOhB,UAAUX,SAAW2B,EAAOd,KAC3F,CACAkC,WAAAA,CAAYrB,KAAYsB,GACftB,EAAQC,SACTD,EAAQC,OAAS,IAAInB,GAEzB,IAAK,MAAMyC,KAAUD,EACjBtB,EAAQC,OAAOvB,KAAK6C,GAAQtB,OAEpC,CACAuB,MAAAA,CAAO1B,EAAU2B,GACRpD,KAAK6C,UAAUpB,IAGfA,EAASG,UAGdyB,EAAAA,EAAAA,IAAgB5B,EAAUA,EAASG,QAAQ,EAAO,OAAQwB,GAC1D3B,EAASmB,SAAWnB,EAASG,OAAOb,MACxC,E","sources":["webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/updater-rotate/browser/Options/Classes/RotateAnimation.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/updater-rotate/browser/Options/Classes/Rotate.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/updater-rotate/browser/RotateUpdater.js"],"sourcesContent":["import { setRangeValue } from \"@tsparticles/engine\";\r\nexport class RotateAnimation {\r\n    constructor() {\r\n        this.enable = false;\r\n        this.speed = 0;\r\n        this.decay = 0;\r\n        this.sync = false;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        if (data.enable !== undefined) {\r\n            this.enable = data.enable;\r\n        }\r\n        if (data.speed !== undefined) {\r\n            this.speed = setRangeValue(data.speed);\r\n        }\r\n        if (data.decay !== undefined) {\r\n            this.decay = setRangeValue(data.decay);\r\n        }\r\n        if (data.sync !== undefined) {\r\n            this.sync = data.sync;\r\n        }\r\n    }\r\n}\r\n","import { ValueWithRandom, } from \"@tsparticles/engine\";\r\nimport { RotateAnimation } from \"./RotateAnimation.js\";\r\nexport class Rotate extends ValueWithRandom {\r\n    constructor() {\r\n        super();\r\n        this.animation = new RotateAnimation();\r\n        this.direction = \"clockwise\";\r\n        this.path = false;\r\n        this.value = 0;\r\n    }\r\n    load(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        super.load(data);\r\n        if (data.direction !== undefined) {\r\n            this.direction = data.direction;\r\n        }\r\n        this.animation.load(data.animation);\r\n        if (data.path !== undefined) {\r\n            this.path = data.path;\r\n        }\r\n    }\r\n}\r\n","import { degToRad, getRandom, getRangeValue, updateAnimation, } from \"@tsparticles/engine\";\r\nimport { Rotate } from \"./Options/Classes/Rotate.js\";\r\nconst double = 2, doublePI = Math.PI * double, identity = 1, doublePIDeg = 360;\r\nexport class RotateUpdater {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    init(particle) {\r\n        const rotateOptions = particle.options.rotate;\r\n        if (!rotateOptions) {\r\n            return;\r\n        }\r\n        particle.rotate = {\r\n            enable: rotateOptions.animation.enable,\r\n            value: degToRad(getRangeValue(rotateOptions.value)),\r\n            min: 0,\r\n            max: doublePI,\r\n        };\r\n        particle.pathRotation = rotateOptions.path;\r\n        let rotateDirection = rotateOptions.direction;\r\n        if (rotateDirection === \"random\") {\r\n            const index = Math.floor(getRandom() * double), minIndex = 0;\r\n            rotateDirection = index > minIndex ? \"counter-clockwise\" : \"clockwise\";\r\n        }\r\n        switch (rotateDirection) {\r\n            case \"counter-clockwise\":\r\n            case \"counterClockwise\":\r\n                particle.rotate.status = \"decreasing\";\r\n                break;\r\n            case \"clockwise\":\r\n                particle.rotate.status = \"increasing\";\r\n                break;\r\n        }\r\n        const rotateAnimation = rotateOptions.animation;\r\n        if (rotateAnimation.enable) {\r\n            particle.rotate.decay = identity - getRangeValue(rotateAnimation.decay);\r\n            particle.rotate.velocity =\r\n                (getRangeValue(rotateAnimation.speed) / doublePIDeg) * this.container.retina.reduceFactor;\r\n            if (!rotateAnimation.sync) {\r\n                particle.rotate.velocity *= getRandom();\r\n            }\r\n        }\r\n        particle.rotation = particle.rotate.value;\r\n    }\r\n    isEnabled(particle) {\r\n        const rotate = particle.options.rotate;\r\n        if (!rotate) {\r\n            return false;\r\n        }\r\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\r\n    }\r\n    loadOptions(options, ...sources) {\r\n        if (!options.rotate) {\r\n            options.rotate = new Rotate();\r\n        }\r\n        for (const source of sources) {\r\n            options.rotate.load(source?.rotate);\r\n        }\r\n    }\r\n    update(particle, delta) {\r\n        if (!this.isEnabled(particle)) {\r\n            return;\r\n        }\r\n        if (!particle.rotate) {\r\n            return;\r\n        }\r\n        updateAnimation(particle, particle.rotate, false, \"none\", delta);\r\n        particle.rotation = particle.rotate.value;\r\n    }\r\n}\r\n"],"names":["RotateAnimation","constructor","this","enable","speed","decay","sync","load","data","undefined","setRangeValue","Rotate","ValueWithRandom","super","animation","direction","path","value","double","doublePI","Math","PI","identity","doublePIDeg","RotateUpdater","container","init","particle","rotateOptions","options","rotate","degToRad","getRangeValue","min","max","pathRotation","rotateDirection","index","floor","getRandom","minIndex","status","rotateAnimation","velocity","retina","reduceFactor","rotation","isEnabled","destroyed","spawning","loadOptions","sources","source","update","delta","updateAnimation"],"sourceRoot":""}