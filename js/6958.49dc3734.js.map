{"version":3,"file":"js/6958.49dc3734.js","mappings":"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","sources":["webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/interaction-particles-links/browser/Utils.js","webpack://bradley-consuegra-portfolio/./node_modules/@tsparticles/interaction-particles-links/browser/LinkInstance.js"],"sourcesContent":["import { drawLine, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb, } from \"@tsparticles/engine\";\r\nexport function drawTriangle(context, p1, p2, p3) {\r\n    context.beginPath();\r\n    context.moveTo(p1.x, p1.y);\r\n    context.lineTo(p2.x, p2.y);\r\n    context.lineTo(p3.x, p3.y);\r\n    context.closePath();\r\n}\r\nexport function drawLinkLine(params) {\r\n    let drawn = false;\r\n    const { begin, end, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\r\n    if (getDistance(begin, end) <= maxDistance) {\r\n        drawLine(context, begin, end);\r\n        drawn = true;\r\n    }\r\n    else if (links.warp) {\r\n        let pi1;\r\n        let pi2;\r\n        const endNE = {\r\n            x: end.x - canvasSize.width,\r\n            y: end.y,\r\n        };\r\n        const d1 = getDistances(begin, endNE);\r\n        if (d1.distance <= maxDistance) {\r\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\r\n            pi1 = { x: 0, y: yi };\r\n            pi2 = { x: canvasSize.width, y: yi };\r\n        }\r\n        else {\r\n            const endSW = {\r\n                x: end.x,\r\n                y: end.y - canvasSize.height,\r\n            };\r\n            const d2 = getDistances(begin, endSW);\r\n            if (d2.distance <= maxDistance) {\r\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\r\n                const xi = -yi / (d2.dy / d2.dx);\r\n                pi1 = { x: xi, y: 0 };\r\n                pi2 = { x: xi, y: canvasSize.height };\r\n            }\r\n            else {\r\n                const endSE = {\r\n                    x: end.x - canvasSize.width,\r\n                    y: end.y - canvasSize.height,\r\n                };\r\n                const d3 = getDistances(begin, endSE);\r\n                if (d3.distance <= maxDistance) {\r\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\r\n                    const xi = -yi / (d3.dy / d3.dx);\r\n                    pi1 = { x: xi, y: yi };\r\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\r\n                }\r\n            }\r\n        }\r\n        if (pi1 && pi2) {\r\n            drawLine(context, begin, pi1);\r\n            drawLine(context, end, pi2);\r\n            drawn = true;\r\n        }\r\n    }\r\n    if (!drawn) {\r\n        return;\r\n    }\r\n    context.lineWidth = width;\r\n    if (backgroundMask.enable) {\r\n        context.globalCompositeOperation = backgroundMask.composite;\r\n    }\r\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\r\n    const { shadow } = links;\r\n    if (shadow.enable) {\r\n        const shadowColor = rangeColorToRgb(shadow.color);\r\n        if (shadowColor) {\r\n            context.shadowBlur = shadow.blur;\r\n            context.shadowColor = getStyleFromRgb(shadowColor);\r\n        }\r\n    }\r\n    context.stroke();\r\n}\r\nexport function drawLinkTriangle(params) {\r\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\r\n    drawTriangle(context, pos1, pos2, pos3);\r\n    if (backgroundMask.enable) {\r\n        context.globalCompositeOperation = backgroundMask.composite;\r\n    }\r\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\r\n    context.fill();\r\n}\r\nexport function getLinkKey(ids) {\r\n    ids.sort((a, b) => a - b);\r\n    return ids.join(\"_\");\r\n}\r\nexport function setLinkFrequency(particles, dictionary) {\r\n    const key = getLinkKey(particles.map((t) => t.id));\r\n    let res = dictionary.get(key);\r\n    if (res === undefined) {\r\n        res = getRandom();\r\n        dictionary.set(key, res);\r\n    }\r\n    return res;\r\n}\r\n","import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"@tsparticles/engine\";\r\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils.js\";\r\nconst minOpacity = 0, minWidth = 0, minDistance = 0, half = 0.5, maxFrequency = 1;\r\nexport class LinkInstance {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this._drawLinkLine = (p1, link) => {\r\n            const p1LinksOptions = p1.options.links;\r\n            if (!p1LinksOptions?.enable) {\r\n                return;\r\n            }\r\n            const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\r\n            let opacity = link.opacity;\r\n            container.canvas.draw((ctx) => {\r\n                let colorLine;\r\n                const twinkle = p1.options.twinkle?.lines;\r\n                if (twinkle?.enable) {\r\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\r\n                    if (twinkling && twinkleRgb) {\r\n                        colorLine = twinkleRgb;\r\n                        opacity = getRangeValue(twinkle.opacity);\r\n                    }\r\n                }\r\n                if (!colorLine) {\r\n                    const linkColor = p1LinksOptions.id !== undefined\r\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\r\n                        : container.particles.linksColor;\r\n                    colorLine = getLinkColor(p1, p2, linkColor);\r\n                }\r\n                if (!colorLine) {\r\n                    return;\r\n                }\r\n                const width = p1.retina.linksWidth ?? minWidth, maxDistance = p1.retina.linksDistance ?? minDistance, { backgroundMask } = options;\r\n                drawLinkLine({\r\n                    context: ctx,\r\n                    width,\r\n                    begin: pos1,\r\n                    end: pos2,\r\n                    maxDistance,\r\n                    canvasSize: container.canvas.size,\r\n                    links: p1LinksOptions,\r\n                    backgroundMask: backgroundMask,\r\n                    colorLine,\r\n                    opacity,\r\n                });\r\n            });\r\n        };\r\n        this._drawLinkTriangle = (p1, link1, link2) => {\r\n            const linksOptions = p1.options.links;\r\n            if (!linksOptions?.enable) {\r\n                return;\r\n            }\r\n            const triangleOptions = linksOptions.triangles;\r\n            if (!triangleOptions.enable) {\r\n                return;\r\n            }\r\n            const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) * half;\r\n            if (opacityTriangle <= minOpacity) {\r\n                return;\r\n            }\r\n            container.canvas.draw((ctx) => {\r\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? minDistance;\r\n                if (getDistance(pos1, pos2) > linksDistance ||\r\n                    getDistance(pos3, pos2) > linksDistance ||\r\n                    getDistance(pos3, pos1) > linksDistance) {\r\n                    return;\r\n                }\r\n                let colorTriangle = rangeColorToRgb(triangleOptions.color);\r\n                if (!colorTriangle) {\r\n                    const linkColor = linksOptions.id !== undefined\r\n                        ? container.particles.linksColors.get(linksOptions.id)\r\n                        : container.particles.linksColor;\r\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\r\n                }\r\n                if (!colorTriangle) {\r\n                    return;\r\n                }\r\n                drawLinkTriangle({\r\n                    context: ctx,\r\n                    pos1,\r\n                    pos2,\r\n                    pos3,\r\n                    backgroundMask: options.backgroundMask,\r\n                    colorTriangle,\r\n                    opacityTriangle,\r\n                });\r\n            });\r\n        };\r\n        this._drawTriangles = (options, p1, link, p1Links) => {\r\n            const p2 = link.destination;\r\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\r\n                return;\r\n            }\r\n            const vertices = p2.links?.filter((t) => {\r\n                const linkFreq = this._getLinkFrequency(p2, t.destination), minCount = 0;\r\n                return (p2.options.links &&\r\n                    linkFreq <= p2.options.links.frequency &&\r\n                    p1Links.findIndex((l) => l.destination === t.destination) >= minCount);\r\n            });\r\n            if (!vertices?.length) {\r\n                return;\r\n            }\r\n            for (const vertex of vertices) {\r\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\r\n                if (triangleFreq > options.links.triangles.frequency) {\r\n                    continue;\r\n                }\r\n                this._drawLinkTriangle(p1, link, vertex);\r\n            }\r\n        };\r\n        this._getLinkFrequency = (p1, p2) => {\r\n            return setLinkFrequency([p1, p2], this._freqs.links);\r\n        };\r\n        this._getTriangleFrequency = (p1, p2, p3) => {\r\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\r\n        };\r\n        this._freqs = {\r\n            links: new Map(),\r\n            triangles: new Map(),\r\n        };\r\n    }\r\n    drawParticle(context, particle) {\r\n        const { links, options } = particle;\r\n        if (!links?.length) {\r\n            return;\r\n        }\r\n        const p1Links = links.filter((l) => options.links &&\r\n            (options.links.frequency >= maxFrequency ||\r\n                this._getLinkFrequency(particle, l.destination) <= options.links.frequency));\r\n        for (const link of p1Links) {\r\n            this._drawTriangles(options, particle, link, p1Links);\r\n            if (link.opacity > minOpacity && (particle.retina.linksWidth ?? minWidth) > minWidth) {\r\n                this._drawLinkLine(particle, link);\r\n            }\r\n        }\r\n    }\r\n    async init() {\r\n        this._freqs.links = new Map();\r\n        this._freqs.triangles = new Map();\r\n        await Promise.resolve();\r\n    }\r\n    particleCreated(particle) {\r\n        particle.links = [];\r\n        if (!particle.options.links) {\r\n            return;\r\n        }\r\n        const ratio = this.container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\r\n        retina.linksDistance = distance * ratio;\r\n        retina.linksWidth = width * ratio;\r\n    }\r\n    particleDestroyed(particle) {\r\n        particle.links = [];\r\n    }\r\n}\r\n"],"names":["drawTriangle","context","p1","p2","p3","beginPath","moveTo","x","y","lineTo","closePath","drawLinkLine","params","drawn","begin","end","maxDistance","canvasSize","width","backgroundMask","colorLine","opacity","links","getDistance","drawLine","warp","pi1","pi2","endNE","d1","getDistances","distance","yi","dy","dx","endSW","height","d2","xi","endSE","d3","lineWidth","enable","globalCompositeOperation","composite","strokeStyle","getStyleFromRgb","shadow","shadowColor","rangeColorToRgb","color","shadowBlur","blur","stroke","drawLinkTriangle","pos1","pos2","pos3","colorTriangle","opacityTriangle","fillStyle","fill","getLinkKey","ids","sort","a","b","join","setLinkFrequency","particles","dictionary","key","map","t","id","res","get","undefined","getRandom","set","minOpacity","minWidth","minDistance","half","maxFrequency","LinkInstance","constructor","container","this","_drawLinkLine","link","p1LinksOptions","options","actualOptions","destination","getPosition","canvas","draw","ctx","twinkle","lines","twinkleFreq","frequency","twinkleRgb","twinkling","getRangeValue","linkColor","linksColors","linksColor","getLinkColor","retina","linksWidth","linksDistance","size","_drawLinkTriangle","link1","link2","linksOptions","triangleOptions","triangles","_drawTriangles","p1Links","vertices","filter","linkFreq","_getLinkFrequency","minCount","findIndex","l","length","vertex","triangleFreq","_getTriangleFrequency","_freqs","Map","drawParticle","particle","init","Promise","resolve","particleCreated","ratio","pixelRatio","particleDestroyed"],"sourceRoot":""}